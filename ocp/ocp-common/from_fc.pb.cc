// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: from_fc.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "from_fc.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace com {
namespace microsoft {
namespace cellsar {
namespace protobuf {
namespace fc {
class PlmnDataDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<PlmnData>
     _instance;
} _PlmnData_default_instance_;
class SmsDataDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<SmsData>
     _instance;
} _SmsData_default_instance_;
class FcMessageDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<FcMessage>
     _instance;
} _FcMessage_default_instance_;

namespace protobuf_from_5ffc_2eproto {


namespace {

::google::protobuf::Metadata file_level_metadata[3];

}  // namespace

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTableField
    const TableStruct::entries[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  {0, 0, 0, ::google::protobuf::internal::kInvalidMask, 0, 0},
};

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::AuxillaryParseTableField
    const TableStruct::aux[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  ::google::protobuf::internal::AuxillaryParseTableField(),
};
PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTable const
    TableStruct::schema[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
};

const ::google::protobuf::uint32 TableStruct::offsets[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlmnData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlmnData, mcc_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlmnData, mnc_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SmsData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SmsData, subscriber_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SmsData, msg_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SmsData, tries_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FcMessage, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FcMessage, type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FcMessage, time_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FcMessage, plmn_data_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FcMessage, sms_data_),
};
static const ::google::protobuf::internal::MigrationSchema schemas[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(PlmnData)},
  { 7, -1, sizeof(SmsData)},
  { 15, -1, sizeof(FcMessage)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&_PlmnData_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_SmsData_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_FcMessage_default_instance_),
};

namespace {

void protobuf_AssignDescriptors() {
  AddDescriptors();
  ::google::protobuf::MessageFactory* factory = NULL;
  AssignDescriptors(
      "from_fc.proto", schemas, file_default_instances, TableStruct::offsets, factory,
      file_level_metadata, NULL, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 3);
}

}  // namespace
void TableStruct::InitDefaultsImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::internal::InitProtobufDefaults();
  ::com::microsoft::cellsar::protobuf::protobuf_data_2eproto::InitDefaults();
  _PlmnData_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_PlmnData_default_instance_);_SmsData_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_SmsData_default_instance_);_FcMessage_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_FcMessage_default_instance_);_SmsData_default_instance_._instance.get_mutable()->subscriber_ = const_cast< ::com::microsoft::cellsar::protobuf::Subscriber*>(
      ::com::microsoft::cellsar::protobuf::Subscriber::internal_default_instance());
  _FcMessage_default_instance_._instance.get_mutable()->plmn_data_ = const_cast< ::com::microsoft::cellsar::protobuf::fc::PlmnData*>(
      ::com::microsoft::cellsar::protobuf::fc::PlmnData::internal_default_instance());
  _FcMessage_default_instance_._instance.get_mutable()->sms_data_ = const_cast< ::com::microsoft::cellsar::protobuf::fc::SmsData*>(
      ::com::microsoft::cellsar::protobuf::fc::SmsData::internal_default_instance());
}

void InitDefaults() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &TableStruct::InitDefaultsImpl);
}
namespace {
void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
      "\n\rfrom_fc.proto\022!com.microsoft.cellsar.p"
      "rotobuf.fc\032\ndata.proto\"$\n\010PlmnData\022\013\n\003mc"
      "c\030\001 \001(\t\022\013\n\003mnc\030\002 \001(\t\"e\n\007SmsData\022>\n\nsubsc"
      "riber\030\001 \001(\0132*.com.microsoft.cellsar.prot"
      "obuf.Subscriber\022\013\n\003msg\030\002 \001(\t\022\r\n\005tries\030\003 "
      "\001(\r\"\245\001\n\tFcMessage\022\014\n\004type\030\001 \001(\t\022\014\n\004time\030"
      "\002 \001(\004\022>\n\tplmn_data\030\003 \001(\0132+.com.microsoft"
      ".cellsar.protobuf.fc.PlmnData\022<\n\010sms_dat"
      "a\030\004 \001(\0132*.com.microsoft.cellsar.protobuf"
      ".fc.SmsDatab\006proto3"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 379);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "from_fc.proto", &protobuf_RegisterTypes);
  ::com::microsoft::cellsar::protobuf::protobuf_data_2eproto::AddDescriptors();
}
} // anonymous namespace

void AddDescriptors() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at dynamic initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;

}  // namespace protobuf_from_5ffc_2eproto


// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int PlmnData::kMccFieldNumber;
const int PlmnData::kMncFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

PlmnData::PlmnData()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_from_5ffc_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:com.microsoft.cellsar.protobuf.fc.PlmnData)
}
PlmnData::PlmnData(const PlmnData& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  mcc_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.mcc().size() > 0) {
    mcc_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.mcc_);
  }
  mnc_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.mnc().size() > 0) {
    mnc_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.mnc_);
  }
  // @@protoc_insertion_point(copy_constructor:com.microsoft.cellsar.protobuf.fc.PlmnData)
}

void PlmnData::SharedCtor() {
  mcc_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  mnc_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _cached_size_ = 0;
}

PlmnData::~PlmnData() {
  // @@protoc_insertion_point(destructor:com.microsoft.cellsar.protobuf.fc.PlmnData)
  SharedDtor();
}

void PlmnData::SharedDtor() {
  mcc_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  mnc_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void PlmnData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PlmnData::descriptor() {
  protobuf_from_5ffc_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_from_5ffc_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const PlmnData& PlmnData::default_instance() {
  protobuf_from_5ffc_2eproto::InitDefaults();
  return *internal_default_instance();
}

PlmnData* PlmnData::New(::google::protobuf::Arena* arena) const {
  PlmnData* n = new PlmnData;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void PlmnData::Clear() {
// @@protoc_insertion_point(message_clear_start:com.microsoft.cellsar.protobuf.fc.PlmnData)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  mcc_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  mnc_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

bool PlmnData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:com.microsoft.cellsar.protobuf.fc.PlmnData)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string mcc = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_mcc()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->mcc().data(), static_cast<int>(this->mcc().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "com.microsoft.cellsar.protobuf.fc.PlmnData.mcc"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string mnc = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_mnc()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->mnc().data(), static_cast<int>(this->mnc().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "com.microsoft.cellsar.protobuf.fc.PlmnData.mnc"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:com.microsoft.cellsar.protobuf.fc.PlmnData)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:com.microsoft.cellsar.protobuf.fc.PlmnData)
  return false;
#undef DO_
}

void PlmnData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:com.microsoft.cellsar.protobuf.fc.PlmnData)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string mcc = 1;
  if (this->mcc().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->mcc().data(), static_cast<int>(this->mcc().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "com.microsoft.cellsar.protobuf.fc.PlmnData.mcc");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->mcc(), output);
  }

  // string mnc = 2;
  if (this->mnc().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->mnc().data(), static_cast<int>(this->mnc().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "com.microsoft.cellsar.protobuf.fc.PlmnData.mnc");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->mnc(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:com.microsoft.cellsar.protobuf.fc.PlmnData)
}

::google::protobuf::uint8* PlmnData::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:com.microsoft.cellsar.protobuf.fc.PlmnData)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string mcc = 1;
  if (this->mcc().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->mcc().data(), static_cast<int>(this->mcc().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "com.microsoft.cellsar.protobuf.fc.PlmnData.mcc");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->mcc(), target);
  }

  // string mnc = 2;
  if (this->mnc().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->mnc().data(), static_cast<int>(this->mnc().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "com.microsoft.cellsar.protobuf.fc.PlmnData.mnc");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->mnc(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.microsoft.cellsar.protobuf.fc.PlmnData)
  return target;
}

size_t PlmnData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.microsoft.cellsar.protobuf.fc.PlmnData)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string mcc = 1;
  if (this->mcc().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->mcc());
  }

  // string mnc = 2;
  if (this->mnc().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->mnc());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PlmnData::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:com.microsoft.cellsar.protobuf.fc.PlmnData)
  GOOGLE_DCHECK_NE(&from, this);
  const PlmnData* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const PlmnData>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:com.microsoft.cellsar.protobuf.fc.PlmnData)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:com.microsoft.cellsar.protobuf.fc.PlmnData)
    MergeFrom(*source);
  }
}

void PlmnData::MergeFrom(const PlmnData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:com.microsoft.cellsar.protobuf.fc.PlmnData)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.mcc().size() > 0) {

    mcc_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.mcc_);
  }
  if (from.mnc().size() > 0) {

    mnc_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.mnc_);
  }
}

void PlmnData::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:com.microsoft.cellsar.protobuf.fc.PlmnData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PlmnData::CopyFrom(const PlmnData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.microsoft.cellsar.protobuf.fc.PlmnData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PlmnData::IsInitialized() const {
  return true;
}

void PlmnData::Swap(PlmnData* other) {
  if (other == this) return;
  InternalSwap(other);
}
void PlmnData::InternalSwap(PlmnData* other) {
  using std::swap;
  mcc_.Swap(&other->mcc_);
  mnc_.Swap(&other->mnc_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata PlmnData::GetMetadata() const {
  protobuf_from_5ffc_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_from_5ffc_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// PlmnData

// string mcc = 1;
void PlmnData::clear_mcc() {
  mcc_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& PlmnData::mcc() const {
  // @@protoc_insertion_point(field_get:com.microsoft.cellsar.protobuf.fc.PlmnData.mcc)
  return mcc_.GetNoArena();
}
void PlmnData::set_mcc(const ::std::string& value) {
  
  mcc_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:com.microsoft.cellsar.protobuf.fc.PlmnData.mcc)
}
#if LANG_CXX11
void PlmnData::set_mcc(::std::string&& value) {
  
  mcc_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:com.microsoft.cellsar.protobuf.fc.PlmnData.mcc)
}
#endif
void PlmnData::set_mcc(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  mcc_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:com.microsoft.cellsar.protobuf.fc.PlmnData.mcc)
}
void PlmnData::set_mcc(const char* value, size_t size) {
  
  mcc_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:com.microsoft.cellsar.protobuf.fc.PlmnData.mcc)
}
::std::string* PlmnData::mutable_mcc() {
  
  // @@protoc_insertion_point(field_mutable:com.microsoft.cellsar.protobuf.fc.PlmnData.mcc)
  return mcc_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* PlmnData::release_mcc() {
  // @@protoc_insertion_point(field_release:com.microsoft.cellsar.protobuf.fc.PlmnData.mcc)
  
  return mcc_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void PlmnData::set_allocated_mcc(::std::string* mcc) {
  if (mcc != NULL) {
    
  } else {
    
  }
  mcc_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), mcc);
  // @@protoc_insertion_point(field_set_allocated:com.microsoft.cellsar.protobuf.fc.PlmnData.mcc)
}

// string mnc = 2;
void PlmnData::clear_mnc() {
  mnc_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& PlmnData::mnc() const {
  // @@protoc_insertion_point(field_get:com.microsoft.cellsar.protobuf.fc.PlmnData.mnc)
  return mnc_.GetNoArena();
}
void PlmnData::set_mnc(const ::std::string& value) {
  
  mnc_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:com.microsoft.cellsar.protobuf.fc.PlmnData.mnc)
}
#if LANG_CXX11
void PlmnData::set_mnc(::std::string&& value) {
  
  mnc_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:com.microsoft.cellsar.protobuf.fc.PlmnData.mnc)
}
#endif
void PlmnData::set_mnc(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  mnc_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:com.microsoft.cellsar.protobuf.fc.PlmnData.mnc)
}
void PlmnData::set_mnc(const char* value, size_t size) {
  
  mnc_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:com.microsoft.cellsar.protobuf.fc.PlmnData.mnc)
}
::std::string* PlmnData::mutable_mnc() {
  
  // @@protoc_insertion_point(field_mutable:com.microsoft.cellsar.protobuf.fc.PlmnData.mnc)
  return mnc_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* PlmnData::release_mnc() {
  // @@protoc_insertion_point(field_release:com.microsoft.cellsar.protobuf.fc.PlmnData.mnc)
  
  return mnc_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void PlmnData::set_allocated_mnc(::std::string* mnc) {
  if (mnc != NULL) {
    
  } else {
    
  }
  mnc_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), mnc);
  // @@protoc_insertion_point(field_set_allocated:com.microsoft.cellsar.protobuf.fc.PlmnData.mnc)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SmsData::kSubscriberFieldNumber;
const int SmsData::kMsgFieldNumber;
const int SmsData::kTriesFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SmsData::SmsData()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_from_5ffc_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:com.microsoft.cellsar.protobuf.fc.SmsData)
}
SmsData::SmsData(const SmsData& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  msg_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.msg().size() > 0) {
    msg_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.msg_);
  }
  if (from.has_subscriber()) {
    subscriber_ = new ::com::microsoft::cellsar::protobuf::Subscriber(*from.subscriber_);
  } else {
    subscriber_ = NULL;
  }
  tries_ = from.tries_;
  // @@protoc_insertion_point(copy_constructor:com.microsoft.cellsar.protobuf.fc.SmsData)
}

void SmsData::SharedCtor() {
  msg_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&subscriber_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&tries_) -
      reinterpret_cast<char*>(&subscriber_)) + sizeof(tries_));
  _cached_size_ = 0;
}

SmsData::~SmsData() {
  // @@protoc_insertion_point(destructor:com.microsoft.cellsar.protobuf.fc.SmsData)
  SharedDtor();
}

void SmsData::SharedDtor() {
  msg_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete subscriber_;
}

void SmsData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SmsData::descriptor() {
  protobuf_from_5ffc_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_from_5ffc_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const SmsData& SmsData::default_instance() {
  protobuf_from_5ffc_2eproto::InitDefaults();
  return *internal_default_instance();
}

SmsData* SmsData::New(::google::protobuf::Arena* arena) const {
  SmsData* n = new SmsData;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void SmsData::Clear() {
// @@protoc_insertion_point(message_clear_start:com.microsoft.cellsar.protobuf.fc.SmsData)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  msg_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == NULL && subscriber_ != NULL) {
    delete subscriber_;
  }
  subscriber_ = NULL;
  tries_ = 0u;
  _internal_metadata_.Clear();
}

bool SmsData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:com.microsoft.cellsar.protobuf.fc.SmsData)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .com.microsoft.cellsar.protobuf.Subscriber subscriber = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_subscriber()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string msg = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_msg()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->msg().data(), static_cast<int>(this->msg().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "com.microsoft.cellsar.protobuf.fc.SmsData.msg"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 tries = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &tries_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:com.microsoft.cellsar.protobuf.fc.SmsData)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:com.microsoft.cellsar.protobuf.fc.SmsData)
  return false;
#undef DO_
}

void SmsData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:com.microsoft.cellsar.protobuf.fc.SmsData)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .com.microsoft.cellsar.protobuf.Subscriber subscriber = 1;
  if (this->has_subscriber()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->subscriber_, output);
  }

  // string msg = 2;
  if (this->msg().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->msg().data(), static_cast<int>(this->msg().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "com.microsoft.cellsar.protobuf.fc.SmsData.msg");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->msg(), output);
  }

  // uint32 tries = 3;
  if (this->tries() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->tries(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:com.microsoft.cellsar.protobuf.fc.SmsData)
}

::google::protobuf::uint8* SmsData::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:com.microsoft.cellsar.protobuf.fc.SmsData)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .com.microsoft.cellsar.protobuf.Subscriber subscriber = 1;
  if (this->has_subscriber()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->subscriber_, deterministic, target);
  }

  // string msg = 2;
  if (this->msg().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->msg().data(), static_cast<int>(this->msg().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "com.microsoft.cellsar.protobuf.fc.SmsData.msg");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->msg(), target);
  }

  // uint32 tries = 3;
  if (this->tries() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->tries(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.microsoft.cellsar.protobuf.fc.SmsData)
  return target;
}

size_t SmsData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.microsoft.cellsar.protobuf.fc.SmsData)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string msg = 2;
  if (this->msg().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->msg());
  }

  // .com.microsoft.cellsar.protobuf.Subscriber subscriber = 1;
  if (this->has_subscriber()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->subscriber_);
  }

  // uint32 tries = 3;
  if (this->tries() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->tries());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SmsData::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:com.microsoft.cellsar.protobuf.fc.SmsData)
  GOOGLE_DCHECK_NE(&from, this);
  const SmsData* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const SmsData>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:com.microsoft.cellsar.protobuf.fc.SmsData)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:com.microsoft.cellsar.protobuf.fc.SmsData)
    MergeFrom(*source);
  }
}

void SmsData::MergeFrom(const SmsData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:com.microsoft.cellsar.protobuf.fc.SmsData)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.msg().size() > 0) {

    msg_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.msg_);
  }
  if (from.has_subscriber()) {
    mutable_subscriber()->::com::microsoft::cellsar::protobuf::Subscriber::MergeFrom(from.subscriber());
  }
  if (from.tries() != 0) {
    set_tries(from.tries());
  }
}

void SmsData::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:com.microsoft.cellsar.protobuf.fc.SmsData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SmsData::CopyFrom(const SmsData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.microsoft.cellsar.protobuf.fc.SmsData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SmsData::IsInitialized() const {
  return true;
}

void SmsData::Swap(SmsData* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SmsData::InternalSwap(SmsData* other) {
  using std::swap;
  msg_.Swap(&other->msg_);
  swap(subscriber_, other->subscriber_);
  swap(tries_, other->tries_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SmsData::GetMetadata() const {
  protobuf_from_5ffc_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_from_5ffc_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// SmsData

// .com.microsoft.cellsar.protobuf.Subscriber subscriber = 1;
bool SmsData::has_subscriber() const {
  return this != internal_default_instance() && subscriber_ != NULL;
}
void SmsData::clear_subscriber() {
  if (GetArenaNoVirtual() == NULL && subscriber_ != NULL) delete subscriber_;
  subscriber_ = NULL;
}
const ::com::microsoft::cellsar::protobuf::Subscriber& SmsData::subscriber() const {
  const ::com::microsoft::cellsar::protobuf::Subscriber* p = subscriber_;
  // @@protoc_insertion_point(field_get:com.microsoft.cellsar.protobuf.fc.SmsData.subscriber)
  return p != NULL ? *p : *reinterpret_cast<const ::com::microsoft::cellsar::protobuf::Subscriber*>(
      &::com::microsoft::cellsar::protobuf::_Subscriber_default_instance_);
}
::com::microsoft::cellsar::protobuf::Subscriber* SmsData::mutable_subscriber() {
  
  if (subscriber_ == NULL) {
    subscriber_ = new ::com::microsoft::cellsar::protobuf::Subscriber;
  }
  // @@protoc_insertion_point(field_mutable:com.microsoft.cellsar.protobuf.fc.SmsData.subscriber)
  return subscriber_;
}
::com::microsoft::cellsar::protobuf::Subscriber* SmsData::release_subscriber() {
  // @@protoc_insertion_point(field_release:com.microsoft.cellsar.protobuf.fc.SmsData.subscriber)
  
  ::com::microsoft::cellsar::protobuf::Subscriber* temp = subscriber_;
  subscriber_ = NULL;
  return temp;
}
void SmsData::set_allocated_subscriber(::com::microsoft::cellsar::protobuf::Subscriber* subscriber) {
  delete subscriber_;
  subscriber_ = subscriber;
  if (subscriber) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:com.microsoft.cellsar.protobuf.fc.SmsData.subscriber)
}

// string msg = 2;
void SmsData::clear_msg() {
  msg_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& SmsData::msg() const {
  // @@protoc_insertion_point(field_get:com.microsoft.cellsar.protobuf.fc.SmsData.msg)
  return msg_.GetNoArena();
}
void SmsData::set_msg(const ::std::string& value) {
  
  msg_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:com.microsoft.cellsar.protobuf.fc.SmsData.msg)
}
#if LANG_CXX11
void SmsData::set_msg(::std::string&& value) {
  
  msg_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:com.microsoft.cellsar.protobuf.fc.SmsData.msg)
}
#endif
void SmsData::set_msg(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  msg_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:com.microsoft.cellsar.protobuf.fc.SmsData.msg)
}
void SmsData::set_msg(const char* value, size_t size) {
  
  msg_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:com.microsoft.cellsar.protobuf.fc.SmsData.msg)
}
::std::string* SmsData::mutable_msg() {
  
  // @@protoc_insertion_point(field_mutable:com.microsoft.cellsar.protobuf.fc.SmsData.msg)
  return msg_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* SmsData::release_msg() {
  // @@protoc_insertion_point(field_release:com.microsoft.cellsar.protobuf.fc.SmsData.msg)
  
  return msg_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void SmsData::set_allocated_msg(::std::string* msg) {
  if (msg != NULL) {
    
  } else {
    
  }
  msg_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), msg);
  // @@protoc_insertion_point(field_set_allocated:com.microsoft.cellsar.protobuf.fc.SmsData.msg)
}

// uint32 tries = 3;
void SmsData::clear_tries() {
  tries_ = 0u;
}
::google::protobuf::uint32 SmsData::tries() const {
  // @@protoc_insertion_point(field_get:com.microsoft.cellsar.protobuf.fc.SmsData.tries)
  return tries_;
}
void SmsData::set_tries(::google::protobuf::uint32 value) {
  
  tries_ = value;
  // @@protoc_insertion_point(field_set:com.microsoft.cellsar.protobuf.fc.SmsData.tries)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int FcMessage::kTypeFieldNumber;
const int FcMessage::kTimeFieldNumber;
const int FcMessage::kPlmnDataFieldNumber;
const int FcMessage::kSmsDataFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

FcMessage::FcMessage()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_from_5ffc_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:com.microsoft.cellsar.protobuf.fc.FcMessage)
}
FcMessage::FcMessage(const FcMessage& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  type_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.type().size() > 0) {
    type_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.type_);
  }
  if (from.has_plmn_data()) {
    plmn_data_ = new ::com::microsoft::cellsar::protobuf::fc::PlmnData(*from.plmn_data_);
  } else {
    plmn_data_ = NULL;
  }
  if (from.has_sms_data()) {
    sms_data_ = new ::com::microsoft::cellsar::protobuf::fc::SmsData(*from.sms_data_);
  } else {
    sms_data_ = NULL;
  }
  time_ = from.time_;
  // @@protoc_insertion_point(copy_constructor:com.microsoft.cellsar.protobuf.fc.FcMessage)
}

void FcMessage::SharedCtor() {
  type_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&plmn_data_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&time_) -
      reinterpret_cast<char*>(&plmn_data_)) + sizeof(time_));
  _cached_size_ = 0;
}

FcMessage::~FcMessage() {
  // @@protoc_insertion_point(destructor:com.microsoft.cellsar.protobuf.fc.FcMessage)
  SharedDtor();
}

void FcMessage::SharedDtor() {
  type_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete plmn_data_;
  if (this != internal_default_instance()) delete sms_data_;
}

void FcMessage::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FcMessage::descriptor() {
  protobuf_from_5ffc_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_from_5ffc_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const FcMessage& FcMessage::default_instance() {
  protobuf_from_5ffc_2eproto::InitDefaults();
  return *internal_default_instance();
}

FcMessage* FcMessage::New(::google::protobuf::Arena* arena) const {
  FcMessage* n = new FcMessage;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void FcMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:com.microsoft.cellsar.protobuf.fc.FcMessage)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  type_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == NULL && plmn_data_ != NULL) {
    delete plmn_data_;
  }
  plmn_data_ = NULL;
  if (GetArenaNoVirtual() == NULL && sms_data_ != NULL) {
    delete sms_data_;
  }
  sms_data_ = NULL;
  time_ = GOOGLE_ULONGLONG(0);
  _internal_metadata_.Clear();
}

bool FcMessage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:com.microsoft.cellsar.protobuf.fc.FcMessage)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string type = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_type()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->type().data(), static_cast<int>(this->type().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "com.microsoft.cellsar.protobuf.fc.FcMessage.type"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 time = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &time_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .com.microsoft.cellsar.protobuf.fc.PlmnData plmn_data = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_plmn_data()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .com.microsoft.cellsar.protobuf.fc.SmsData sms_data = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_sms_data()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:com.microsoft.cellsar.protobuf.fc.FcMessage)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:com.microsoft.cellsar.protobuf.fc.FcMessage)
  return false;
#undef DO_
}

void FcMessage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:com.microsoft.cellsar.protobuf.fc.FcMessage)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string type = 1;
  if (this->type().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->type().data(), static_cast<int>(this->type().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "com.microsoft.cellsar.protobuf.fc.FcMessage.type");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->type(), output);
  }

  // uint64 time = 2;
  if (this->time() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->time(), output);
  }

  // .com.microsoft.cellsar.protobuf.fc.PlmnData plmn_data = 3;
  if (this->has_plmn_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *this->plmn_data_, output);
  }

  // .com.microsoft.cellsar.protobuf.fc.SmsData sms_data = 4;
  if (this->has_sms_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, *this->sms_data_, output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:com.microsoft.cellsar.protobuf.fc.FcMessage)
}

::google::protobuf::uint8* FcMessage::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:com.microsoft.cellsar.protobuf.fc.FcMessage)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string type = 1;
  if (this->type().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->type().data(), static_cast<int>(this->type().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "com.microsoft.cellsar.protobuf.fc.FcMessage.type");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->type(), target);
  }

  // uint64 time = 2;
  if (this->time() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->time(), target);
  }

  // .com.microsoft.cellsar.protobuf.fc.PlmnData plmn_data = 3;
  if (this->has_plmn_data()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, *this->plmn_data_, deterministic, target);
  }

  // .com.microsoft.cellsar.protobuf.fc.SmsData sms_data = 4;
  if (this->has_sms_data()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        4, *this->sms_data_, deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.microsoft.cellsar.protobuf.fc.FcMessage)
  return target;
}

size_t FcMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.microsoft.cellsar.protobuf.fc.FcMessage)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string type = 1;
  if (this->type().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->type());
  }

  // .com.microsoft.cellsar.protobuf.fc.PlmnData plmn_data = 3;
  if (this->has_plmn_data()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->plmn_data_);
  }

  // .com.microsoft.cellsar.protobuf.fc.SmsData sms_data = 4;
  if (this->has_sms_data()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->sms_data_);
  }

  // uint64 time = 2;
  if (this->time() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->time());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FcMessage::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:com.microsoft.cellsar.protobuf.fc.FcMessage)
  GOOGLE_DCHECK_NE(&from, this);
  const FcMessage* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const FcMessage>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:com.microsoft.cellsar.protobuf.fc.FcMessage)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:com.microsoft.cellsar.protobuf.fc.FcMessage)
    MergeFrom(*source);
  }
}

void FcMessage::MergeFrom(const FcMessage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:com.microsoft.cellsar.protobuf.fc.FcMessage)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.type().size() > 0) {

    type_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.type_);
  }
  if (from.has_plmn_data()) {
    mutable_plmn_data()->::com::microsoft::cellsar::protobuf::fc::PlmnData::MergeFrom(from.plmn_data());
  }
  if (from.has_sms_data()) {
    mutable_sms_data()->::com::microsoft::cellsar::protobuf::fc::SmsData::MergeFrom(from.sms_data());
  }
  if (from.time() != 0) {
    set_time(from.time());
  }
}

void FcMessage::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:com.microsoft.cellsar.protobuf.fc.FcMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FcMessage::CopyFrom(const FcMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.microsoft.cellsar.protobuf.fc.FcMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FcMessage::IsInitialized() const {
  return true;
}

void FcMessage::Swap(FcMessage* other) {
  if (other == this) return;
  InternalSwap(other);
}
void FcMessage::InternalSwap(FcMessage* other) {
  using std::swap;
  type_.Swap(&other->type_);
  swap(plmn_data_, other->plmn_data_);
  swap(sms_data_, other->sms_data_);
  swap(time_, other->time_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata FcMessage::GetMetadata() const {
  protobuf_from_5ffc_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_from_5ffc_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// FcMessage

// string type = 1;
void FcMessage::clear_type() {
  type_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& FcMessage::type() const {
  // @@protoc_insertion_point(field_get:com.microsoft.cellsar.protobuf.fc.FcMessage.type)
  return type_.GetNoArena();
}
void FcMessage::set_type(const ::std::string& value) {
  
  type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:com.microsoft.cellsar.protobuf.fc.FcMessage.type)
}
#if LANG_CXX11
void FcMessage::set_type(::std::string&& value) {
  
  type_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:com.microsoft.cellsar.protobuf.fc.FcMessage.type)
}
#endif
void FcMessage::set_type(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:com.microsoft.cellsar.protobuf.fc.FcMessage.type)
}
void FcMessage::set_type(const char* value, size_t size) {
  
  type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:com.microsoft.cellsar.protobuf.fc.FcMessage.type)
}
::std::string* FcMessage::mutable_type() {
  
  // @@protoc_insertion_point(field_mutable:com.microsoft.cellsar.protobuf.fc.FcMessage.type)
  return type_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* FcMessage::release_type() {
  // @@protoc_insertion_point(field_release:com.microsoft.cellsar.protobuf.fc.FcMessage.type)
  
  return type_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void FcMessage::set_allocated_type(::std::string* type) {
  if (type != NULL) {
    
  } else {
    
  }
  type_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), type);
  // @@protoc_insertion_point(field_set_allocated:com.microsoft.cellsar.protobuf.fc.FcMessage.type)
}

// uint64 time = 2;
void FcMessage::clear_time() {
  time_ = GOOGLE_ULONGLONG(0);
}
::google::protobuf::uint64 FcMessage::time() const {
  // @@protoc_insertion_point(field_get:com.microsoft.cellsar.protobuf.fc.FcMessage.time)
  return time_;
}
void FcMessage::set_time(::google::protobuf::uint64 value) {
  
  time_ = value;
  // @@protoc_insertion_point(field_set:com.microsoft.cellsar.protobuf.fc.FcMessage.time)
}

// .com.microsoft.cellsar.protobuf.fc.PlmnData plmn_data = 3;
bool FcMessage::has_plmn_data() const {
  return this != internal_default_instance() && plmn_data_ != NULL;
}
void FcMessage::clear_plmn_data() {
  if (GetArenaNoVirtual() == NULL && plmn_data_ != NULL) delete plmn_data_;
  plmn_data_ = NULL;
}
const ::com::microsoft::cellsar::protobuf::fc::PlmnData& FcMessage::plmn_data() const {
  const ::com::microsoft::cellsar::protobuf::fc::PlmnData* p = plmn_data_;
  // @@protoc_insertion_point(field_get:com.microsoft.cellsar.protobuf.fc.FcMessage.plmn_data)
  return p != NULL ? *p : *reinterpret_cast<const ::com::microsoft::cellsar::protobuf::fc::PlmnData*>(
      &::com::microsoft::cellsar::protobuf::fc::_PlmnData_default_instance_);
}
::com::microsoft::cellsar::protobuf::fc::PlmnData* FcMessage::mutable_plmn_data() {
  
  if (plmn_data_ == NULL) {
    plmn_data_ = new ::com::microsoft::cellsar::protobuf::fc::PlmnData;
  }
  // @@protoc_insertion_point(field_mutable:com.microsoft.cellsar.protobuf.fc.FcMessage.plmn_data)
  return plmn_data_;
}
::com::microsoft::cellsar::protobuf::fc::PlmnData* FcMessage::release_plmn_data() {
  // @@protoc_insertion_point(field_release:com.microsoft.cellsar.protobuf.fc.FcMessage.plmn_data)
  
  ::com::microsoft::cellsar::protobuf::fc::PlmnData* temp = plmn_data_;
  plmn_data_ = NULL;
  return temp;
}
void FcMessage::set_allocated_plmn_data(::com::microsoft::cellsar::protobuf::fc::PlmnData* plmn_data) {
  delete plmn_data_;
  plmn_data_ = plmn_data;
  if (plmn_data) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:com.microsoft.cellsar.protobuf.fc.FcMessage.plmn_data)
}

// .com.microsoft.cellsar.protobuf.fc.SmsData sms_data = 4;
bool FcMessage::has_sms_data() const {
  return this != internal_default_instance() && sms_data_ != NULL;
}
void FcMessage::clear_sms_data() {
  if (GetArenaNoVirtual() == NULL && sms_data_ != NULL) delete sms_data_;
  sms_data_ = NULL;
}
const ::com::microsoft::cellsar::protobuf::fc::SmsData& FcMessage::sms_data() const {
  const ::com::microsoft::cellsar::protobuf::fc::SmsData* p = sms_data_;
  // @@protoc_insertion_point(field_get:com.microsoft.cellsar.protobuf.fc.FcMessage.sms_data)
  return p != NULL ? *p : *reinterpret_cast<const ::com::microsoft::cellsar::protobuf::fc::SmsData*>(
      &::com::microsoft::cellsar::protobuf::fc::_SmsData_default_instance_);
}
::com::microsoft::cellsar::protobuf::fc::SmsData* FcMessage::mutable_sms_data() {
  
  if (sms_data_ == NULL) {
    sms_data_ = new ::com::microsoft::cellsar::protobuf::fc::SmsData;
  }
  // @@protoc_insertion_point(field_mutable:com.microsoft.cellsar.protobuf.fc.FcMessage.sms_data)
  return sms_data_;
}
::com::microsoft::cellsar::protobuf::fc::SmsData* FcMessage::release_sms_data() {
  // @@protoc_insertion_point(field_release:com.microsoft.cellsar.protobuf.fc.FcMessage.sms_data)
  
  ::com::microsoft::cellsar::protobuf::fc::SmsData* temp = sms_data_;
  sms_data_ = NULL;
  return temp;
}
void FcMessage::set_allocated_sms_data(::com::microsoft::cellsar::protobuf::fc::SmsData* sms_data) {
  delete sms_data_;
  sms_data_ = sms_data;
  if (sms_data) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:com.microsoft.cellsar.protobuf.fc.FcMessage.sms_data)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace fc
}  // namespace protobuf
}  // namespace cellsar
}  // namespace microsoft
}  // namespace com

// @@protoc_insertion_point(global_scope)
