diff --git a/yatebts/sar/sar_config.js b/yatebts/sar/sar_config.js
index e9b192f..256b025 100644
--- a/yatebts/sar/sar_config.js
+++ b/yatebts/sar/sar_config.js
@@ -23,7 +23,8 @@
 
 var config = {
    'testing': true,
-   'loud_sms': false
+   'loud_sms': false,
+   'poll_phyinfo': true
 };
 
 // intervals (in ms) between different runs
@@ -63,7 +64,7 @@ function loadConfiguration() {
 
          config.testing = general.getBoolValue('testing', config.testing);
          config.loud_sms = general.getBoolValue('loud_sms', config.loud_sms);
-         config.polling_rate = general.getIntValue('polling_rate', config.polling_rate);
+         config.poll_phyinfo = general.getBoolValue('poll_phyinfo', config.poll_phyinfo);
 
          country_code = general.getIntValue('country_code', country_code);
 
diff --git a/yatebts/sar/sar_lib.js b/yatebts/sar/sar_lib.js
index fbbdd50..b7b1616 100644
--- a/yatebts/sar/sar_lib.js
+++ b/yatebts/sar/sar_lib.js
@@ -67,10 +67,10 @@ function initializeSAR() {
    Message.install(onHandsetRegister, "user.register", 80, 'driver', 'ybts');
    Message.install(onHandsetUnregister, "user.unregister", 80);
    Message.install(onPhyinfo, "phyinfo", 80);
-   Message.install(onSMS, "msg.execute", 80, "callto", droneRootImsi); // receives SMSes that are routed to the drone IMSI
+   Message.install(onRouteSMS, "call.route", 80, 'route_type', 'msg'); // onRouteSMS in sms.js
+   Message.install(onSMS, "msg.execute", 80, "callto", droneRootImsi);
    Message.install(onEngineStatus, "engine.status", 75);
    Message.install(onYBTSStatus, "ybts.status", 75);
-   // Message.install(onRoute, "call.route", 80); TODO: route sms messages
 
    Engine.setInterval(onIntervalMaster, intervals.master);
 
@@ -78,7 +78,7 @@ function initializeSAR() {
    if (onInterval) installPeriodicAction(onInterval, intervals.onInterval, 'client');
    installPeriodicAction(heartbeat, intervals.heartbeat, 'heartbeat');
    installPeriodicAction(expireSubscribers, intervals.subscriberExpire, 'expireSubscribers');
-   installPeriodicAction(sendSilentSMSs, intervals.phyinfoPolling, 'pollPhyinfo');
+   if (config.poll_phyinfo) installPeriodicAction(sendSilentSMSs, intervals.phyinfoPolling, 'pollPhyinfo');
    installPeriodicAction(sendNextSMS, intervals.sendSMS, 'sendSMS');
 
    // Ready!
@@ -109,7 +109,7 @@ function installPeriodicAction(action, delay, name) {
 
 /* ############### Event Handlers and Hooks ############### */
 
-var onInterval, onPhoneDetected, onPhoneLost, onSendSMS, onSMSReceived, onSignalReceived;
+var onInterval, onPhoneDetected, onPhoneLost, onSendSMS, onSMSDetected, onSignalReceived;
 
 function onEngineStatus(msg) {
    log("engine.status detected. Message contents:");
@@ -175,10 +175,11 @@ function onHandsetRegister(msg) {
    msg.msisdn = subscriber.msisdn;
 
    // greet the user on first register
-   if (ret === REGISTERED) {
+   if (ret === REGISTERED || ret === DUPLICATE) { // TODO remove duplicate when multiple handset authentication is working
       sendHelloSMS(subscriber);
       if (config.testing) {
-         var msgText = subscriber.imsi + ", Your phone # is : '" + subscriber.msisdn + "'";
+         var msgText = subscriber.imsi + "(" + subscriber.tmsi + "), Your phone # is : '" 
+            + subscriber.msisdn + "'";
          sendSMSMessage(subscriber.imsi, msgText);
       }
    }
@@ -224,24 +225,76 @@ function onPhyinfo(msg) {
    return true;
 }
 
-function onRoute(msg) {
-   // only care about SMS messages for now
-   if (msg.route_type === "msg")
-      return onRouteSMS(msg);
-   Engine.debug(Engine.DebugInfo, "Cannot handle route type: " + msg.route_type);
-   return false;
-}
-
 function onSMS(msg) {
-   Engine.debug(Engine.DebugInfo, "Got SMS from IMSI " + msg.imsi + " - '" 
-      + msg.text + "'");
+   Engine.debug(Engine.DebugInfo, "ATTEMPTING to send SMS: \"" + msg.text + "\"");
+
+   // make sure we have the requisite info
+   if (!msg.caller || !msg.called || (!msg.imsi && !msg.tmsi)) {
+      Engine.debug(Engine.DebugInfo, "FAILED: protocol error");
+      msg.error = "111";
+      return false;
+   }
 
-   if (onSMSReceived) onSMSReceived(msg);
+   // get the 'from' subscriber
+   var from = getSubscriber(msg.imsi, msg.tmsi);
+   if (!from || !from.msisdn) {
+      Engine.debug(Engine.DebugInfo, 
+         "FAILED: Unknown 'from' subscriber or incomplete subscriber registration.");
+      msg.error = "28";
+      return false;
+   }
+
+   // just in case either one is missing
+   msg.imsi = from.imsi;
+   msg.tmsi = from.tmsi;
+
+   // get the 'to' subscriber
+   var dest = msg['sms.called'];
+   var to = getSubscriberByMSISDN(dest);
+   if (!to || !to.imsi) {
+      
+      // special handling to route to OCP
+      if (dest == droneRootMsisdn) {
+         Engine.debug(Engine.DebugInfo, "SUCCESSFUL sending SMS to OCP");
+
+         writeToOCP({
+            'subscriber': simpleSubscriber(from),
+            'msg': msg.text
+         }, 'sms');
+
+         if (onSMSDetected) onSMSDetected({'imsi': from.imsi, 'dest_imsi': droneRootImsi, 'msg': msg.text});
+         return true;
+      }
+
+      Engine.debug(Engine.DebugInfo, "FAILED: Unknown 'to' subscriber. (MSISDN=" + dest + ")");
+      msg.error = "1";
+      return false;
+   }
+
+   // build and send the sms
+   var next_try = Date.now() / 1000;
+   var sms = {
+      'imsi': from.imsi,
+      'msisdn': from.msisdn,
+      'smsc': msg.called,
+      'dest': dest,
+      'dest_imsi': to.imsi,
+      'next_try': next_try,
+      'tries': 3,
+      'msg': msg.text
+   };
+   pendingSMSs.push(sms);
+
+   // finished!
+   Engine.debug(Engine.DebugInfo, "SUCCESSFUL sending SMS");
+   if (onSMSDetected) onSMSDetected({'imsi': from.imsi, 'dest_imsi': to.imsi, 'msg': msg.text});
+
+   return true;
 }
 
 function heartbeat() {
    var subs = activeSubscribers.map(function(sub) { 
-      return {'imsi': sub.imsi, 'tmsi': sub.tmsi, 'msisdn': sub.msisdn};
+      return simpleSubscriber(sub);
    });
 
    var radio = {
diff --git a/yatebts/sar/searchandrescue.js b/yatebts/sar/searchandrescue.js
index 472d1a2..65e61c5 100644
--- a/yatebts/sar/searchandrescue.js
+++ b/yatebts/sar/searchandrescue.js
@@ -53,11 +53,11 @@ function onSendSMS(sms) {
 
 }
 
-function onSMSReceived(sms) {
+function onSMSDetected(sms) {
 
-   // TODO: Code here is run when an SMS is received from a phone
-   Engine.debug(Engine.DebugInfo, "EXECUTING searchandrescue.onSMSReceived "
-      + "{imsi: " + sms.imsi + ", msg: " + sms.msg + "}");
+   // TODO: Code here is run when an SMS is passed through the network
+   Engine.debug(Engine.DebugInfo, "EXECUTING searchandrescue.onSMSDetected "
+      + "to '" + sms.dest_imsi + "', from '" + sms.imsi + "', text: \"" + sms.msg + "\"");
 
 }
 
diff --git a/yatebts/sar/sms.js b/yatebts/sar/sms.js
index d5fe7a7..e527b02 100644
--- a/yatebts/sar/sms.js
+++ b/yatebts/sar/sms.js
@@ -47,7 +47,7 @@ function sendHelloSMS(subscriber) {
    }
 }
 
-function enqueueSilentSMS(imsi) {
+function sendSilentSMS(imsi) {
     var subscriber = getSubscriber(imsi);
     if (!subscriber) return false;
     
@@ -128,7 +128,7 @@ function sendSMS(sms) {
    m.otmsi = destSubscriber["tmsi"];
    m.maxpdd = "5000";
    
-   return m.enqueue(); // dispatch seems to lock up yate... not sure why. For now, enqueue seems to work though.
+   return m.enqueue();
 }
 
 function trySendingLater(sms) {
@@ -164,7 +164,7 @@ function sendSilentSMSs() {
 
          sendSMSMessage(subscriber.imsi, text);
 
-      } else if (!enqueueSilentSMS(subscriber["imsi"])) {
+      } else if (!sendSilentSMS(subscriber["imsi"])) {
          Engine.debug(Engine.DebugInfo, "Failed to dispatch StealthSMS to IMSI: " + subscriber["imsi"]);
       }
 
@@ -176,6 +176,7 @@ function onRouteSMS(msg) {
    if (!msg.caller || !msg.called || !msg['sms.called'])
       return false;
 
+   msg.retValue(droneRootImsi);
    return true;
 }
 
diff --git a/yatebts/sar/subscribers.js b/yatebts/sar/subscribers.js
index 1a128b7..4755fde 100644
--- a/yatebts/sar/subscribers.js
+++ b/yatebts/sar/subscribers.js
@@ -31,6 +31,15 @@ var NO_IMSI = 2;
 var NOT_ALLOWED = 3;
 var DUPLICATE = 4;
 
+function simpleSubscriber(sub) {
+   var result = {
+      'imsi': sub.imsi,
+      'tmsi': sub.tmsi,
+      'msisdn': sub.msisdn
+   };
+   return result;
+}
+
 function registerSubscriber(imsi, tmsi) {
    // TODO: trigger authentication
 
@@ -50,7 +59,7 @@ function registerSubscriber(imsi, tmsi) {
    }
 
    // check if the subscriber already exists
-   var subscriber = getSubscriber(imsi, tmsi);
+   var subscriber = getSubscriber(imsi); // purposely ignoring tmsi, if its a duplicate, we'll reset it
    if (subscriber) {
       Engine.debug(Engine.DebugInfo, "DUPLICATE handset registration.");
       return DUPLICATE;
@@ -62,8 +71,11 @@ function registerSubscriber(imsi, tmsi) {
       return NOT_ALLOWED;
    }
 
+   // make sure they have a unique TMSI
+   if (!tmsi || !tmsiAvailable(tmsi))
+      tmsi = allocateTmsi();
+
    // add the subscriber!
-   if (!tmsi) tmsi = allocateTmsi();
    var msisdn = allocatePhoneNumber(imsi);
    var expiry = Date.now() / 1000 + 3600 * 24; // 1 day
    var loc = "ybts/TMSI" + tmsi;
@@ -104,6 +116,14 @@ function imsiPermitted(imsi) {
       || (!config.testing && !forbiddenImsis[imsi]);
 }
 
+function getSubscriberByMSISDN(msisdn) {
+   for (var i = 0; i < activeSubscribers.length; ++i) {
+      if (activeSubscribers[i].msisdn === msisdn)
+         return activeSubscribers[i];
+   }
+   return null;
+}
+
 function getSubscriber(imsi, tmsi) {
    for (var i = 0; i < activeSubscribers.length; ++i) {
       if ((!imsi && activeSubscribers[i]["tmsi"] === tmsi) || // Given TMSI but no IMSI
