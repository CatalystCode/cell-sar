diff --git a/yatebts/Makefile.in b/yatebts/Makefile.in
index a693162..98e5cfd 100644
--- a/yatebts/Makefile.in
+++ b/yatebts/Makefile.in
@@ -52,7 +52,6 @@ shrdir := @YATE_SHR@
 all: $(PROGS)
 	$(MAKE) -C ./transceiver all
 	$(MAKE) -C ./mbts/apps all
-	$(MAKE) -C ./nib/auth all
 
 debug:
 	$(MAKE) all DEBUG=-g3 MODSTRIP=
@@ -73,7 +72,6 @@ clean:
 	    test ! -f "$$i/Makefile" || $(MAKE) -C "$$i" clean BUILD_TESTS=yes; \
 	done
 	$(MAKE) -C ./transceiver clean
-	$(MAKE) -C ./nib/auth clean
 
 check-topdir:
 	@test -f configure || (echo "Must make this target in the top source directory"; exit 1)
@@ -116,15 +114,11 @@ install: all
 	    install -m 0644 @srcdir@/$$i "$(DESTDIR)$(docdir)/" ; \
 	done
 	$(MAKE) -C ./mbts/apps install
-	$(MAKE) -C ./nib install
-	$(MAKE) -C ./nib/auth install
 	$(MAKE) -C ./roaming install
 	$(MAKE) -C ./scripts install
 	$(MAKE) -C ./sar install
 
 uninstall:
-	$(MAKE) -C ./nib/auth uninstall
-	$(MAKE) -C ./nib uninstall
 	$(MAKE) -C ./roaming uninstall
 	$(MAKE) -C ./scripts uninstall
 	$(MAKE) -C ./mbts/apps uninstall
diff --git a/yatebts/sar/sar_config.js b/yatebts/sar/sar_config.js
index a0966af..5003d9a 100644
--- a/yatebts/sar/sar_config.js
+++ b/yatebts/sar/sar_config.js
@@ -22,7 +22,7 @@
 var config = {
    'testing': true,
    'loud_sms': false,
-   'polling_rate': 2
+   'polling_rate': 5
 };
 
 var helloText = "phone detected";  // sent to a phone when they join the network
diff --git a/yatebts/sar/sar_lib.js b/yatebts/sar/sar_lib.js
index 460ad88..c7ab2d1 100644
--- a/yatebts/sar/sar_lib.js
+++ b/yatebts/sar/sar_lib.js
@@ -56,6 +56,7 @@ function initializeSAR() {
    Message.install(onHandsetUnregister, "user.unregister", 80);
    Message.install(onPhyinfo, "phyinfo", 80);
    Message.install(onSMS, "msg.execute", 80, "callto", droneRootImsi); // receives SMSes that are routed to the drone IMSI
+   // Message.install(onRoute, "call.route", 80); TODO: route sms messages
    Engine.setInterval(onIntervalSAR, 1000);
 
    // Ready!
@@ -93,8 +94,10 @@ function onIdleAction() {
 }
 
 function onHandsetRegister(msg) {
+   
+   // Make sure the subscriber gets registered properly
    var ret = registerSubscriber(msg.imsi, msg.tmsi);
-   if (ret !== REGISTERED) {
+   if (ret !== REGISTERED && ret !== DUPLICATE) {
       if (ret === NO_IMSI) {
          Engine.debug(Engine.DebugInfo, "Asking for new IMSI");
          msg.askimsi = true;
@@ -103,12 +106,20 @@ function onHandsetRegister(msg) {
       return false;
    }
 
+   // update the yate msg
    var subscriber = getSubscriber(msg.imsi, msg.tmsi);
    msg.imsi = subscriber.imsi;
    msg.tmsi = subscriber.tmsi;
    msg.msisdn = subscriber.msisdn;
 
-   sendHelloSMS(subscriber);
+   // greet the user on first register
+   if (ret === REGISTERED) {
+      sendHelloSMS(subscriber);
+      if (config.testing) {
+         var msgText = subscriber.imsi + ", Your phone # is : '" + subscriber.msisdn + "'";
+         sendSMSMessage(subscriber.imsi, msgText);
+      }
+   }
 
    if (onPhoneDetected) onPhoneDetected(subscriber);
 
@@ -126,7 +137,7 @@ function onPhyinfo(msg) {
    // check if a valid subscriber
    var subscriber = getSubscriber(msg.IMSI, msg.TMSI);
    if (subscriber === null) {
-      // Engine.debug(Engine.DebugInfo, "Unknown subscriber with IMSI: " + msg.IMSI + " and TMSI " + msg.TMSI);
+      Engine.debug(Engine.DebugInfo, "Unknown subscriber with IMSI: " + msg.IMSI + " and TMSI " + msg.TMSI);
       return true;
    }
 
@@ -156,6 +167,14 @@ function onPhyinfo(msg) {
    return true;
 }
 
+function onRoute(msg) {
+   // only care about SMS messages for now
+   if (msg.route_type === "msg")
+      return onRouteSMS(msg);
+   Engine.debug(Engine.DebugInfo, "Cannot handle route type: " + msg.route_type);
+   return false;
+}
+
 function onSMS(msg) {
    Engine.debug(Engine.DebugInfo, "Got SMS from IMSI " + msg.imsi + " - '" 
       + msg.text + "'");
diff --git a/yatebts/sar/sms.js b/yatebts/sar/sms.js
index 591e892..833c81f 100644
--- a/yatebts/sar/sms.js
+++ b/yatebts/sar/sms.js
@@ -172,6 +172,13 @@ function sendSilentSMSs() {
    }
 }
 
+function onRouteSMS(msg) {
+   if (!msg.caller || !msg.called || !msg['sms.called'])
+      return false;
+
+   return true;
+}
+
 function onIdleActionSMS() {
    sendSilentSMSs();
 
diff --git a/yatebts/sar/subscribers.js b/yatebts/sar/subscribers.js
index 315cfcc..f480097 100644
--- a/yatebts/sar/subscribers.js
+++ b/yatebts/sar/subscribers.js
@@ -29,6 +29,7 @@ var REGISTERED = 0;
 var NO_IMSI_OR_TMSI = 1;
 var NO_IMSI = 2;
 var NOT_ALLOWED = 3;
+var DUPLICATE = 4;
 
 function registerSubscriber(imsi, tmsi) {
    // TODO: trigger authentication
@@ -52,7 +53,7 @@ function registerSubscriber(imsi, tmsi) {
    var subscriber = getSubscriber(imsi, tmsi);
    if (subscriber) {
       Engine.debug(Engine.DebugInfo, "DUPLICATE handset registration.");
-      return REGISTERED;
+      return DUPLICATE;
    }
 
    // the specific imsi must be allowed
