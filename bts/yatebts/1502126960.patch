diff --git a/yatebts/sar/sar.conf.sample b/yatebts/sar/sar.conf.sample
index 6f36957..2e39c00 100644
--- a/yatebts/sar/sar.conf.sample
+++ b/yatebts/sar/sar.conf.sample
@@ -14,6 +14,9 @@ country_code=1
 ; Phone number the sensor identifies itself as when communicating with cell phones
 sensor_phone_number=1234
 
+; A greeting text that is sent to each handset that connects to the network.
+helloText=phone detected
+
 ; Configuration of specific IMSIs. Each section describes an IMSI value and its configuration 
 ; within the Search And Rescue engine.
 ; 
@@ -33,4 +36,26 @@ sensor_phone_number=1234
 ; [987654321000000]
 ; Alice's (Contoso Search and Rescue) Phone
 ; allowed=false
-; forbidden=true
\ No newline at end of file
+; forbidden=true
+
+[intervals]
+; Configure time intervals (in milliseconds) for specific actions. 
+; For best performance, choose intervals with a large (>1000) greatest common divisor 
+; as a master periodic action will run at that interval. 
+; 
+; NOTE: untested with values less than 1000
+
+; How often a heartbeat status message is sent to the OCP
+;heartbeat=10000
+
+; How often cell phone signal strength is measured.
+;phyinfoPolling=3000
+
+; How often cell subscriptions are checked for expiration.
+;subscriberExpire=5000
+
+; How often an SMS is sent
+;sendSMS=1000
+
+; How often the onInterval function in searchandrescue.js is called
+;onInterval=10000
diff --git a/yatebts/sar/sar_config.js b/yatebts/sar/sar_config.js
index 5003d9a..e9b192f 100644
--- a/yatebts/sar/sar_config.js
+++ b/yatebts/sar/sar_config.js
@@ -19,10 +19,21 @@
   * along with cell-sar.  If not, see <http://www.gnu.org/licenses/>.
   */
 
+#require "utils.js"
+
 var config = {
    'testing': true,
-   'loud_sms': false,
-   'polling_rate': 5
+   'loud_sms': false
+};
+
+// intervals (in ms) between different runs
+var intervals = {
+   // 'master': , // calculated when loadConfiguration is run to be the gcd of all other timers
+   'heartbeat': 10000,
+   'phyinfoPolling': 3000,
+   'subscriberExpire': 5000,
+   'onInterval': 10000,
+   'sendSMS': 1000
 };
 
 var helloText = "phone detected";  // sent to a phone when they join the network
@@ -64,6 +75,17 @@ function loadConfiguration() {
 
          helloText = general.getValue('helloText', helloText);
 
+      } else if (section === 'intervals') {
+         var times = [];
+         var intervalSection = conf.getSection(section);
+
+         for (var timer in intervals) {
+            intervals[timer] = intervalSection.getIntValue(timer, intervals[timer]);
+            times.push(intervals[timer]);
+         }
+
+         intervals['master'] = gcdNums(times);
+
       } else if (imsiPattern.test(section)) {
          var imsi = section;
          var imsiConfig = conf.getSection(imsi);
diff --git a/yatebts/sar/sar_lib.js b/yatebts/sar/sar_lib.js
index c7ab2d1..4405f02 100644
--- a/yatebts/sar/sar_lib.js
+++ b/yatebts/sar/sar_lib.js
@@ -33,11 +33,17 @@ Engine.debugName("searchandrescue");
 
 var sar = SearchAndRescue();
 
-function writeToOCP(obj) {
+function writeToOCP(data, type) {
+   var now = Date.now();
+   var obj = {
+      'type': type,
+      'time': now,
+      'data': data
+   };
+
    var objStr = JSON.stringify(obj);
-   Engine.debug(Engine.DebugInfo, "Writing to OCP: " + objStr);
    sar.writeToOCP(objStr);
-}
+};
 
 /* ############### SAR Initialization ############### */
 
@@ -51,18 +57,46 @@ function initializeSAR() {
    // install message handlers and callbacks
    Engine.debug(Engine.DebugInfo, "Installing SAR Listeners");
    Message.install(onAuth, "auth", 80);
-   Message.install(onIdleAction, "idle.execute", 110, "module", "sar_cache");
    Message.install(onHandsetRegister, "user.register", 80, 'driver', 'ybts');
    Message.install(onHandsetUnregister, "user.unregister", 80);
    Message.install(onPhyinfo, "phyinfo", 80);
    Message.install(onSMS, "msg.execute", 80, "callto", droneRootImsi); // receives SMSes that are routed to the drone IMSI
    // Message.install(onRoute, "call.route", 80); TODO: route sms messages
-   Engine.setInterval(onIntervalSAR, 1000);
+   Engine.setInterval(onIntervalMaster, intervals.master);
+
+   // setup periodic actions
+   if (onInterval) installPeriodicAction(onInterval, intervals.onInterval, 'client');
+   installPeriodicAction(heartbeat, intervals.heartbeat, 'heartbeat');
+   installPeriodicAction(expireSubscribers, intervals.subscriberExpire, 'expireSubscribers');
+   installPeriodicAction(sendSilentSMSs, intervals.phyinfoPolling, 'pollPhyinfo');
+   installPeriodicAction(sendNextSMS, intervals.sensSMS, 'sendSMS');
 
    // Ready!
    Engine.debug(Engine.DebugInfo, "Search and Rescue Cell Site is UP! Let's go save some lives.");
 }
 
+var periodicActions = [];
+
+function installPeriodicAction(action, delay, name) {
+   if (delay <= 0) {
+      Engine.alarm(4, "A Periodic Action must have a positive delay");
+      return;
+   } else if (delay < 1000) {
+      Engine.debug(Engine.DebugInfo, "WARNING: periodic actions are untested with delays less than 1000");
+   }
+
+   var when = Date.now() + delay;
+   var periodicAction = {
+      'action': action,
+      'delay': delay,
+      'name': name,
+      'next': when
+   };
+   periodicActions.push(periodicAction);
+
+   Message.install(action, "idle.execute", 80, 'module', name);
+}
+
 /* ############### Event Handlers and Hooks ############### */
 
 var onInterval, onPhoneDetected, onPhoneLost, onSendSMS, onSMSReceived, onSignalReceived;
@@ -82,17 +116,6 @@ function onAuth(msg) {
 	return true;
 }
 
-function onIdleAction() {
-
-   Engine.debug(Engine.DebugInfo, "EXECUTING sar_lib.onIdleAction");
-
-   onIdleActionSMS();
-   onIdleActionSubscribers();   
-
-   // Reschedule after 5s
-   onIntervalSAR.nextIdle = now + config.polling_rate;
-}
-
 function onHandsetRegister(msg) {
    
    // Make sure the subscriber gets registered properly
@@ -151,12 +174,7 @@ function onPhyinfo(msg) {
       'DnRSSIdBm': msg.DnRSSIdBm,
       'time': msg.time
    };
-   writeToOCP({
-      'type': 'phy',
-      'IMSI': subscriber.imsi,
-      'TMSI': subscriber.tmsi,
-      'data': phyinfo
-   });
+   writeToOCP(phyinfo, 'phy');
 
    // update the subscriber's phyinfo
    subscriber.lastPhyinfo = phyinfo;
@@ -182,17 +200,22 @@ function onSMS(msg) {
    if (onSMSReceived) onSMSReceived(msg);
 }
 
-function onIntervalSAR() {
-   var when = Date.now() / 1000;
-   if (onIntervalSAR.nextIdle >= 0 && when >= onIntervalSAR.nextIdle) {
-      onIntervalSAR.nextIdle = -1;
-      var m = new Message("idle.execute");
-      m.module = "sar_cache";
-      if (!m.enqueue())
-         onIntervalSAR.nextIdle = when + 5;
-   }
-
-   // client's interval action
-   if (onInterval) onInterval();
+function heartbeat() {
+   writeToOCP(null, 'status');   
 }
 
+function onIntervalMaster() {
+   var now = Date.now();
+
+   for (var i = 0; i < periodicActions.length; ++i) {
+      var periodicAction = periodicActions[i];
+
+      if (periodicAction.next && periodicAction.next < now) {
+         var m = new Message("idle.execute");
+         m.module = periodicAction.name;
+         m.enqueue();
+
+         periodicAction.next = now + periodicAction.delay;
+      }
+   }
+}
diff --git a/yatebts/sar/searchandrescue.js b/yatebts/sar/searchandrescue.js
index a838ea5..472d1a2 100644
--- a/yatebts/sar/searchandrescue.js
+++ b/yatebts/sar/searchandrescue.js
@@ -23,8 +23,8 @@
 
 function onInterval() {
 
-   // TODO: Code here is run on an interval.
-   // Engine.debug(Engine.DebugInfo, "EXECUTING searchandrescue.onInterval");
+   // TODO: Code here is run once every second.
+   Engine.debug(Engine.DebugInfo, "EXECUTING searchandrescue.onInterval");
 
 }
 
diff --git a/yatebts/sar/sms.js b/yatebts/sar/sms.js
index 833c81f..d5fe7a7 100644
--- a/yatebts/sar/sms.js
+++ b/yatebts/sar/sms.js
@@ -179,9 +179,7 @@ function onRouteSMS(msg) {
    return true;
 }
 
-function onIdleActionSMS() {
-   sendSilentSMSs();
-
+function sendNextSMS() {
    var now = Date.now()/1000;
    var sms;
 
diff --git a/yatebts/sar/subscribers.js b/yatebts/sar/subscribers.js
index f480097..1a128b7 100644
--- a/yatebts/sar/subscribers.js
+++ b/yatebts/sar/subscribers.js
@@ -172,7 +172,7 @@ function expireSubscriptions(now) {
    }
 }
 
-function onIdleActionSubscribers() {
+function expireSubscribers() {
    var now = Date.now() / 1000;
    if (now % 100 < 5) {
       expireSubscriptions(now);
diff --git a/yatebts/sar/utils.js b/yatebts/sar/utils.js
index 8588e41..0822757 100644
--- a/yatebts/sar/utils.js
+++ b/yatebts/sar/utils.js
@@ -102,3 +102,29 @@ function generatePhoneNumber() {
 	case 24: return A+B+C+"6789";
    }
 }
+
+function gcdNums(nums) {
+   if (nums.length === 0)
+      return null;
+   if (nums.length === 1)
+      return nums[0];
+
+   var gcd = gcdTwoNums(nums[0], nums[1]);
+   for (var i = 2; i < nums.length; ++i)
+      gcd = gcdTwoNums(gcd, nums[i]);
+   return gcd;
+}
+
+function gcdTwoNums(a, b) {
+   if (a < b) {
+      var tmp = a;
+      a = b;
+      b = tmp;
+   }
+      
+   var q = parseInt(a / b); // Math.floor doesn't exist...
+   var r = a - q * b;
+
+   if (r === 0) return b;
+   return gcdTwoNums(b, r);
+}
