// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: data.proto

#ifndef PROTOBUF_data_2eproto__INCLUDED
#define PROTOBUF_data_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3004000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3004000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
namespace com {
namespace microsoft {
namespace cellsar {
namespace protobuf {
class Radio;
class RadioDefaultTypeInternal;
extern RadioDefaultTypeInternal _Radio_default_instance_;
class Subscriber;
class SubscriberDefaultTypeInternal;
extern SubscriberDefaultTypeInternal _Subscriber_default_instance_;
}  // namespace protobuf
}  // namespace cellsar
}  // namespace microsoft
}  // namespace com

namespace com {
namespace microsoft {
namespace cellsar {
namespace protobuf {

namespace protobuf_data_2eproto {
// Internal implementation detail -- do not call these.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[];
  static const ::google::protobuf::uint32 offsets[];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static void InitDefaultsImpl();
};
void AddDescriptors();
void InitDefaults();
}  // namespace protobuf_data_2eproto

// ===================================================================

class Subscriber : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:com.microsoft.cellsar.protobuf.Subscriber) */ {
 public:
  Subscriber();
  virtual ~Subscriber();

  Subscriber(const Subscriber& from);

  inline Subscriber& operator=(const Subscriber& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Subscriber(Subscriber&& from) noexcept
    : Subscriber() {
    *this = ::std::move(from);
  }

  inline Subscriber& operator=(Subscriber&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Subscriber& default_instance();

  static inline const Subscriber* internal_default_instance() {
    return reinterpret_cast<const Subscriber*>(
               &_Subscriber_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    0;

  void Swap(Subscriber* other);
  friend void swap(Subscriber& a, Subscriber& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Subscriber* New() const PROTOBUF_FINAL { return New(NULL); }

  Subscriber* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const Subscriber& from);
  void MergeFrom(const Subscriber& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(Subscriber* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string imsi = 1;
  void clear_imsi();
  static const int kImsiFieldNumber = 1;
  const ::std::string& imsi() const;
  void set_imsi(const ::std::string& value);
  #if LANG_CXX11
  void set_imsi(::std::string&& value);
  #endif
  void set_imsi(const char* value);
  void set_imsi(const char* value, size_t size);
  ::std::string* mutable_imsi();
  ::std::string* release_imsi();
  void set_allocated_imsi(::std::string* imsi);

  // string tmsi = 2;
  void clear_tmsi();
  static const int kTmsiFieldNumber = 2;
  const ::std::string& tmsi() const;
  void set_tmsi(const ::std::string& value);
  #if LANG_CXX11
  void set_tmsi(::std::string&& value);
  #endif
  void set_tmsi(const char* value);
  void set_tmsi(const char* value, size_t size);
  ::std::string* mutable_tmsi();
  ::std::string* release_tmsi();
  void set_allocated_tmsi(::std::string* tmsi);

  // string msisdn = 3;
  void clear_msisdn();
  static const int kMsisdnFieldNumber = 3;
  const ::std::string& msisdn() const;
  void set_msisdn(const ::std::string& value);
  #if LANG_CXX11
  void set_msisdn(::std::string&& value);
  #endif
  void set_msisdn(const char* value);
  void set_msisdn(const char* value, size_t size);
  ::std::string* mutable_msisdn();
  ::std::string* release_msisdn();
  void set_allocated_msisdn(::std::string* msisdn);

  // @@protoc_insertion_point(class_scope:com.microsoft.cellsar.protobuf.Subscriber)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr imsi_;
  ::google::protobuf::internal::ArenaStringPtr tmsi_;
  ::google::protobuf::internal::ArenaStringPtr msisdn_;
  mutable int _cached_size_;
  friend struct protobuf_data_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Radio : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:com.microsoft.cellsar.protobuf.Radio) */ {
 public:
  Radio();
  virtual ~Radio();

  Radio(const Radio& from);

  inline Radio& operator=(const Radio& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Radio(Radio&& from) noexcept
    : Radio() {
    *this = ::std::move(from);
  }

  inline Radio& operator=(Radio&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Radio& default_instance();

  static inline const Radio* internal_default_instance() {
    return reinterpret_cast<const Radio*>(
               &_Radio_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    1;

  void Swap(Radio* other);
  friend void swap(Radio& a, Radio& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Radio* New() const PROTOBUF_FINAL { return New(NULL); }

  Radio* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const Radio& from);
  void MergeFrom(const Radio& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(Radio* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string stopped_reason = 2;
  void clear_stopped_reason();
  static const int kStoppedReasonFieldNumber = 2;
  const ::std::string& stopped_reason() const;
  void set_stopped_reason(const ::std::string& value);
  #if LANG_CXX11
  void set_stopped_reason(::std::string&& value);
  #endif
  void set_stopped_reason(const char* value);
  void set_stopped_reason(const char* value, size_t size);
  ::std::string* mutable_stopped_reason();
  ::std::string* release_stopped_reason();
  void set_allocated_stopped_reason(::std::string* stopped_reason);

  // bool stopped = 1;
  void clear_stopped();
  static const int kStoppedFieldNumber = 1;
  bool stopped() const;
  void set_stopped(bool value);

  // @@protoc_insertion_point(class_scope:com.microsoft.cellsar.protobuf.Radio)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr stopped_reason_;
  bool stopped_;
  mutable int _cached_size_;
  friend struct protobuf_data_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Subscriber

// string imsi = 1;
inline void Subscriber::clear_imsi() {
  imsi_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Subscriber::imsi() const {
  // @@protoc_insertion_point(field_get:com.microsoft.cellsar.protobuf.Subscriber.imsi)
  return imsi_.GetNoArena();
}
inline void Subscriber::set_imsi(const ::std::string& value) {
  
  imsi_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:com.microsoft.cellsar.protobuf.Subscriber.imsi)
}
#if LANG_CXX11
inline void Subscriber::set_imsi(::std::string&& value) {
  
  imsi_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:com.microsoft.cellsar.protobuf.Subscriber.imsi)
}
#endif
inline void Subscriber::set_imsi(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  imsi_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:com.microsoft.cellsar.protobuf.Subscriber.imsi)
}
inline void Subscriber::set_imsi(const char* value, size_t size) {
  
  imsi_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:com.microsoft.cellsar.protobuf.Subscriber.imsi)
}
inline ::std::string* Subscriber::mutable_imsi() {
  
  // @@protoc_insertion_point(field_mutable:com.microsoft.cellsar.protobuf.Subscriber.imsi)
  return imsi_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Subscriber::release_imsi() {
  // @@protoc_insertion_point(field_release:com.microsoft.cellsar.protobuf.Subscriber.imsi)
  
  return imsi_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Subscriber::set_allocated_imsi(::std::string* imsi) {
  if (imsi != NULL) {
    
  } else {
    
  }
  imsi_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), imsi);
  // @@protoc_insertion_point(field_set_allocated:com.microsoft.cellsar.protobuf.Subscriber.imsi)
}

// string tmsi = 2;
inline void Subscriber::clear_tmsi() {
  tmsi_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Subscriber::tmsi() const {
  // @@protoc_insertion_point(field_get:com.microsoft.cellsar.protobuf.Subscriber.tmsi)
  return tmsi_.GetNoArena();
}
inline void Subscriber::set_tmsi(const ::std::string& value) {
  
  tmsi_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:com.microsoft.cellsar.protobuf.Subscriber.tmsi)
}
#if LANG_CXX11
inline void Subscriber::set_tmsi(::std::string&& value) {
  
  tmsi_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:com.microsoft.cellsar.protobuf.Subscriber.tmsi)
}
#endif
inline void Subscriber::set_tmsi(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  tmsi_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:com.microsoft.cellsar.protobuf.Subscriber.tmsi)
}
inline void Subscriber::set_tmsi(const char* value, size_t size) {
  
  tmsi_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:com.microsoft.cellsar.protobuf.Subscriber.tmsi)
}
inline ::std::string* Subscriber::mutable_tmsi() {
  
  // @@protoc_insertion_point(field_mutable:com.microsoft.cellsar.protobuf.Subscriber.tmsi)
  return tmsi_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Subscriber::release_tmsi() {
  // @@protoc_insertion_point(field_release:com.microsoft.cellsar.protobuf.Subscriber.tmsi)
  
  return tmsi_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Subscriber::set_allocated_tmsi(::std::string* tmsi) {
  if (tmsi != NULL) {
    
  } else {
    
  }
  tmsi_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), tmsi);
  // @@protoc_insertion_point(field_set_allocated:com.microsoft.cellsar.protobuf.Subscriber.tmsi)
}

// string msisdn = 3;
inline void Subscriber::clear_msisdn() {
  msisdn_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Subscriber::msisdn() const {
  // @@protoc_insertion_point(field_get:com.microsoft.cellsar.protobuf.Subscriber.msisdn)
  return msisdn_.GetNoArena();
}
inline void Subscriber::set_msisdn(const ::std::string& value) {
  
  msisdn_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:com.microsoft.cellsar.protobuf.Subscriber.msisdn)
}
#if LANG_CXX11
inline void Subscriber::set_msisdn(::std::string&& value) {
  
  msisdn_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:com.microsoft.cellsar.protobuf.Subscriber.msisdn)
}
#endif
inline void Subscriber::set_msisdn(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  msisdn_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:com.microsoft.cellsar.protobuf.Subscriber.msisdn)
}
inline void Subscriber::set_msisdn(const char* value, size_t size) {
  
  msisdn_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:com.microsoft.cellsar.protobuf.Subscriber.msisdn)
}
inline ::std::string* Subscriber::mutable_msisdn() {
  
  // @@protoc_insertion_point(field_mutable:com.microsoft.cellsar.protobuf.Subscriber.msisdn)
  return msisdn_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Subscriber::release_msisdn() {
  // @@protoc_insertion_point(field_release:com.microsoft.cellsar.protobuf.Subscriber.msisdn)
  
  return msisdn_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Subscriber::set_allocated_msisdn(::std::string* msisdn) {
  if (msisdn != NULL) {
    
  } else {
    
  }
  msisdn_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), msisdn);
  // @@protoc_insertion_point(field_set_allocated:com.microsoft.cellsar.protobuf.Subscriber.msisdn)
}

// -------------------------------------------------------------------

// Radio

// bool stopped = 1;
inline void Radio::clear_stopped() {
  stopped_ = false;
}
inline bool Radio::stopped() const {
  // @@protoc_insertion_point(field_get:com.microsoft.cellsar.protobuf.Radio.stopped)
  return stopped_;
}
inline void Radio::set_stopped(bool value) {
  
  stopped_ = value;
  // @@protoc_insertion_point(field_set:com.microsoft.cellsar.protobuf.Radio.stopped)
}

// string stopped_reason = 2;
inline void Radio::clear_stopped_reason() {
  stopped_reason_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Radio::stopped_reason() const {
  // @@protoc_insertion_point(field_get:com.microsoft.cellsar.protobuf.Radio.stopped_reason)
  return stopped_reason_.GetNoArena();
}
inline void Radio::set_stopped_reason(const ::std::string& value) {
  
  stopped_reason_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:com.microsoft.cellsar.protobuf.Radio.stopped_reason)
}
#if LANG_CXX11
inline void Radio::set_stopped_reason(::std::string&& value) {
  
  stopped_reason_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:com.microsoft.cellsar.protobuf.Radio.stopped_reason)
}
#endif
inline void Radio::set_stopped_reason(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  stopped_reason_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:com.microsoft.cellsar.protobuf.Radio.stopped_reason)
}
inline void Radio::set_stopped_reason(const char* value, size_t size) {
  
  stopped_reason_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:com.microsoft.cellsar.protobuf.Radio.stopped_reason)
}
inline ::std::string* Radio::mutable_stopped_reason() {
  
  // @@protoc_insertion_point(field_mutable:com.microsoft.cellsar.protobuf.Radio.stopped_reason)
  return stopped_reason_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Radio::release_stopped_reason() {
  // @@protoc_insertion_point(field_release:com.microsoft.cellsar.protobuf.Radio.stopped_reason)
  
  return stopped_reason_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Radio::set_allocated_stopped_reason(::std::string* stopped_reason) {
  if (stopped_reason != NULL) {
    
  } else {
    
  }
  stopped_reason_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), stopped_reason);
  // @@protoc_insertion_point(field_set_allocated:com.microsoft.cellsar.protobuf.Radio.stopped_reason)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)


}  // namespace protobuf
}  // namespace cellsar
}  // namespace microsoft
}  // namespace com

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_data_2eproto__INCLUDED
