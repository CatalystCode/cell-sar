// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: from_yate.proto

#ifndef PROTOBUF_from_5fyate_2eproto__INCLUDED
#define PROTOBUF_from_5fyate_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3004000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3004000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "data.pb.h"
// @@protoc_insertion_point(includes)
namespace com {
namespace microsoft {
namespace cellsar {
namespace protobuf {
namespace yate {
class PhyData;
class PhyDataDefaultTypeInternal;
extern PhyDataDefaultTypeInternal _PhyData_default_instance_;
class SmsData;
class SmsDataDefaultTypeInternal;
extern SmsDataDefaultTypeInternal _SmsData_default_instance_;
class SmsFailedData;
class SmsFailedDataDefaultTypeInternal;
extern SmsFailedDataDefaultTypeInternal _SmsFailedData_default_instance_;
class StatusData;
class StatusDataDefaultTypeInternal;
extern StatusDataDefaultTypeInternal _StatusData_default_instance_;
class YateMessage;
class YateMessageDefaultTypeInternal;
extern YateMessageDefaultTypeInternal _YateMessage_default_instance_;
class YbtsData;
class YbtsDataDefaultTypeInternal;
extern YbtsDataDefaultTypeInternal _YbtsData_default_instance_;
class YbtsData_YbtsStopnotificationData;
class YbtsData_YbtsStopnotificationDataDefaultTypeInternal;
extern YbtsData_YbtsStopnotificationDataDefaultTypeInternal _YbtsData_YbtsStopnotificationData_default_instance_;
class YbtsData_YbtsTimeoutData;
class YbtsData_YbtsTimeoutDataDefaultTypeInternal;
extern YbtsData_YbtsTimeoutDataDefaultTypeInternal _YbtsData_YbtsTimeoutData_default_instance_;
}  // namespace yate
}  // namespace protobuf
}  // namespace cellsar
}  // namespace microsoft
}  // namespace com

namespace com {
namespace microsoft {
namespace cellsar {
namespace protobuf {
namespace yate {

namespace protobuf_from_5fyate_2eproto {
// Internal implementation detail -- do not call these.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[];
  static const ::google::protobuf::uint32 offsets[];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static void InitDefaultsImpl();
};
void AddDescriptors();
void InitDefaults();
}  // namespace protobuf_from_5fyate_2eproto

// ===================================================================

class PhyData : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:com.microsoft.cellsar.protobuf.yate.PhyData) */ {
 public:
  PhyData();
  virtual ~PhyData();

  PhyData(const PhyData& from);

  inline PhyData& operator=(const PhyData& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  PhyData(PhyData&& from) noexcept
    : PhyData() {
    *this = ::std::move(from);
  }

  inline PhyData& operator=(PhyData&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const PhyData& default_instance();

  static inline const PhyData* internal_default_instance() {
    return reinterpret_cast<const PhyData*>(
               &_PhyData_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    0;

  void Swap(PhyData* other);
  friend void swap(PhyData& a, PhyData& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline PhyData* New() const PROTOBUF_FINAL { return New(NULL); }

  PhyData* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const PhyData& from);
  void MergeFrom(const PhyData& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(PhyData* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .com.microsoft.cellsar.protobuf.Subscriber subscriber = 1;
  bool has_subscriber() const;
  void clear_subscriber();
  static const int kSubscriberFieldNumber = 1;
  const ::com::microsoft::cellsar::protobuf::Subscriber& subscriber() const;
  ::com::microsoft::cellsar::protobuf::Subscriber* mutable_subscriber();
  ::com::microsoft::cellsar::protobuf::Subscriber* release_subscriber();
  void set_allocated_subscriber(::com::microsoft::cellsar::protobuf::Subscriber* subscriber);

  // uint32 ta = 2;
  void clear_ta();
  static const int kTaFieldNumber = 2;
  ::google::protobuf::uint32 ta() const;
  void set_ta(::google::protobuf::uint32 value);

  // float te = 3;
  void clear_te();
  static const int kTeFieldNumber = 3;
  float te() const;
  void set_te(float value);

  // float up_rssi = 4;
  void clear_up_rssi();
  static const int kUpRssiFieldNumber = 4;
  float up_rssi() const;
  void set_up_rssi(float value);

  // float dn_rssi_dbm = 5;
  void clear_dn_rssi_dbm();
  static const int kDnRssiDbmFieldNumber = 5;
  float dn_rssi_dbm() const;
  void set_dn_rssi_dbm(float value);

  // float tx_pwr = 6;
  void clear_tx_pwr();
  static const int kTxPwrFieldNumber = 6;
  float tx_pwr() const;
  void set_tx_pwr(float value);

  // @@protoc_insertion_point(class_scope:com.microsoft.cellsar.protobuf.yate.PhyData)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::com::microsoft::cellsar::protobuf::Subscriber* subscriber_;
  ::google::protobuf::uint32 ta_;
  float te_;
  float up_rssi_;
  float dn_rssi_dbm_;
  float tx_pwr_;
  mutable int _cached_size_;
  friend struct protobuf_from_5fyate_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class StatusData : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:com.microsoft.cellsar.protobuf.yate.StatusData) */ {
 public:
  StatusData();
  virtual ~StatusData();

  StatusData(const StatusData& from);

  inline StatusData& operator=(const StatusData& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  StatusData(StatusData&& from) noexcept
    : StatusData() {
    *this = ::std::move(from);
  }

  inline StatusData& operator=(StatusData&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const StatusData& default_instance();

  static inline const StatusData* internal_default_instance() {
    return reinterpret_cast<const StatusData*>(
               &_StatusData_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    1;

  void Swap(StatusData* other);
  friend void swap(StatusData& a, StatusData& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline StatusData* New() const PROTOBUF_FINAL { return New(NULL); }

  StatusData* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const StatusData& from);
  void MergeFrom(const StatusData& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(StatusData* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .com.microsoft.cellsar.protobuf.Subscriber subscribers = 4;
  int subscribers_size() const;
  void clear_subscribers();
  static const int kSubscribersFieldNumber = 4;
  const ::com::microsoft::cellsar::protobuf::Subscriber& subscribers(int index) const;
  ::com::microsoft::cellsar::protobuf::Subscriber* mutable_subscribers(int index);
  ::com::microsoft::cellsar::protobuf::Subscriber* add_subscribers();
  ::google::protobuf::RepeatedPtrField< ::com::microsoft::cellsar::protobuf::Subscriber >*
      mutable_subscribers();
  const ::google::protobuf::RepeatedPtrField< ::com::microsoft::cellsar::protobuf::Subscriber >&
      subscribers() const;

  // .com.microsoft.cellsar.protobuf.Radio radio = 2;
  bool has_radio() const;
  void clear_radio();
  static const int kRadioFieldNumber = 2;
  const ::com::microsoft::cellsar::protobuf::Radio& radio() const;
  ::com::microsoft::cellsar::protobuf::Radio* mutable_radio();
  ::com::microsoft::cellsar::protobuf::Radio* release_radio();
  void set_allocated_radio(::com::microsoft::cellsar::protobuf::Radio* radio);

  // bool engine_started = 1;
  void clear_engine_started();
  static const int kEngineStartedFieldNumber = 1;
  bool engine_started() const;
  void set_engine_started(bool value);

  // uint32 pending_smss = 3;
  void clear_pending_smss();
  static const int kPendingSmssFieldNumber = 3;
  ::google::protobuf::uint32 pending_smss() const;
  void set_pending_smss(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:com.microsoft.cellsar.protobuf.yate.StatusData)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::com::microsoft::cellsar::protobuf::Subscriber > subscribers_;
  ::com::microsoft::cellsar::protobuf::Radio* radio_;
  bool engine_started_;
  ::google::protobuf::uint32 pending_smss_;
  mutable int _cached_size_;
  friend struct protobuf_from_5fyate_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class YbtsData_YbtsTimeoutData : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:com.microsoft.cellsar.protobuf.yate.YbtsData.YbtsTimeoutData) */ {
 public:
  YbtsData_YbtsTimeoutData();
  virtual ~YbtsData_YbtsTimeoutData();

  YbtsData_YbtsTimeoutData(const YbtsData_YbtsTimeoutData& from);

  inline YbtsData_YbtsTimeoutData& operator=(const YbtsData_YbtsTimeoutData& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  YbtsData_YbtsTimeoutData(YbtsData_YbtsTimeoutData&& from) noexcept
    : YbtsData_YbtsTimeoutData() {
    *this = ::std::move(from);
  }

  inline YbtsData_YbtsTimeoutData& operator=(YbtsData_YbtsTimeoutData&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const YbtsData_YbtsTimeoutData& default_instance();

  static inline const YbtsData_YbtsTimeoutData* internal_default_instance() {
    return reinterpret_cast<const YbtsData_YbtsTimeoutData*>(
               &_YbtsData_YbtsTimeoutData_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    2;

  void Swap(YbtsData_YbtsTimeoutData* other);
  friend void swap(YbtsData_YbtsTimeoutData& a, YbtsData_YbtsTimeoutData& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline YbtsData_YbtsTimeoutData* New() const PROTOBUF_FINAL { return New(NULL); }

  YbtsData_YbtsTimeoutData* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const YbtsData_YbtsTimeoutData& from);
  void MergeFrom(const YbtsData_YbtsTimeoutData& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(YbtsData_YbtsTimeoutData* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string timeout_for = 1;
  void clear_timeout_for();
  static const int kTimeoutForFieldNumber = 1;
  const ::std::string& timeout_for() const;
  void set_timeout_for(const ::std::string& value);
  #if LANG_CXX11
  void set_timeout_for(::std::string&& value);
  #endif
  void set_timeout_for(const char* value);
  void set_timeout_for(const char* value, size_t size);
  ::std::string* mutable_timeout_for();
  ::std::string* release_timeout_for();
  void set_allocated_timeout_for(::std::string* timeout_for);

  // @@protoc_insertion_point(class_scope:com.microsoft.cellsar.protobuf.yate.YbtsData.YbtsTimeoutData)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr timeout_for_;
  mutable int _cached_size_;
  friend struct protobuf_from_5fyate_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class YbtsData_YbtsStopnotificationData : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:com.microsoft.cellsar.protobuf.yate.YbtsData.YbtsStopnotificationData) */ {
 public:
  YbtsData_YbtsStopnotificationData();
  virtual ~YbtsData_YbtsStopnotificationData();

  YbtsData_YbtsStopnotificationData(const YbtsData_YbtsStopnotificationData& from);

  inline YbtsData_YbtsStopnotificationData& operator=(const YbtsData_YbtsStopnotificationData& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  YbtsData_YbtsStopnotificationData(YbtsData_YbtsStopnotificationData&& from) noexcept
    : YbtsData_YbtsStopnotificationData() {
    *this = ::std::move(from);
  }

  inline YbtsData_YbtsStopnotificationData& operator=(YbtsData_YbtsStopnotificationData&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const YbtsData_YbtsStopnotificationData& default_instance();

  static inline const YbtsData_YbtsStopnotificationData* internal_default_instance() {
    return reinterpret_cast<const YbtsData_YbtsStopnotificationData*>(
               &_YbtsData_YbtsStopnotificationData_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    3;

  void Swap(YbtsData_YbtsStopnotificationData* other);
  friend void swap(YbtsData_YbtsStopnotificationData& a, YbtsData_YbtsStopnotificationData& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline YbtsData_YbtsStopnotificationData* New() const PROTOBUF_FINAL { return New(NULL); }

  YbtsData_YbtsStopnotificationData* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const YbtsData_YbtsStopnotificationData& from);
  void MergeFrom(const YbtsData_YbtsStopnotificationData& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(YbtsData_YbtsStopnotificationData* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string reason = 2;
  void clear_reason();
  static const int kReasonFieldNumber = 2;
  const ::std::string& reason() const;
  void set_reason(const ::std::string& value);
  #if LANG_CXX11
  void set_reason(::std::string&& value);
  #endif
  void set_reason(const char* value);
  void set_reason(const char* value, size_t size);
  ::std::string* mutable_reason();
  ::std::string* release_reason();
  void set_allocated_reason(::std::string* reason);

  // bool restarting = 1;
  void clear_restarting();
  static const int kRestartingFieldNumber = 1;
  bool restarting() const;
  void set_restarting(bool value);

  // @@protoc_insertion_point(class_scope:com.microsoft.cellsar.protobuf.yate.YbtsData.YbtsStopnotificationData)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr reason_;
  bool restarting_;
  mutable int _cached_size_;
  friend struct protobuf_from_5fyate_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class YbtsData : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:com.microsoft.cellsar.protobuf.yate.YbtsData) */ {
 public:
  YbtsData();
  virtual ~YbtsData();

  YbtsData(const YbtsData& from);

  inline YbtsData& operator=(const YbtsData& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  YbtsData(YbtsData&& from) noexcept
    : YbtsData() {
    *this = ::std::move(from);
  }

  inline YbtsData& operator=(YbtsData&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const YbtsData& default_instance();

  static inline const YbtsData* internal_default_instance() {
    return reinterpret_cast<const YbtsData*>(
               &_YbtsData_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    4;

  void Swap(YbtsData* other);
  friend void swap(YbtsData& a, YbtsData& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline YbtsData* New() const PROTOBUF_FINAL { return New(NULL); }

  YbtsData* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const YbtsData& from);
  void MergeFrom(const YbtsData& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(YbtsData* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  typedef YbtsData_YbtsTimeoutData YbtsTimeoutData;
  typedef YbtsData_YbtsStopnotificationData YbtsStopnotificationData;

  // accessors -------------------------------------------------------

  // string type = 1;
  void clear_type();
  static const int kTypeFieldNumber = 1;
  const ::std::string& type() const;
  void set_type(const ::std::string& value);
  #if LANG_CXX11
  void set_type(::std::string&& value);
  #endif
  void set_type(const char* value);
  void set_type(const char* value, size_t size);
  ::std::string* mutable_type();
  ::std::string* release_type();
  void set_allocated_type(::std::string* type);

  // .com.microsoft.cellsar.protobuf.yate.YbtsData.YbtsTimeoutData ybts_timeout_data = 2;
  bool has_ybts_timeout_data() const;
  void clear_ybts_timeout_data();
  static const int kYbtsTimeoutDataFieldNumber = 2;
  const ::com::microsoft::cellsar::protobuf::yate::YbtsData_YbtsTimeoutData& ybts_timeout_data() const;
  ::com::microsoft::cellsar::protobuf::yate::YbtsData_YbtsTimeoutData* mutable_ybts_timeout_data();
  ::com::microsoft::cellsar::protobuf::yate::YbtsData_YbtsTimeoutData* release_ybts_timeout_data();
  void set_allocated_ybts_timeout_data(::com::microsoft::cellsar::protobuf::yate::YbtsData_YbtsTimeoutData* ybts_timeout_data);

  // .com.microsoft.cellsar.protobuf.yate.YbtsData.YbtsStopnotificationData ybts_stopnotification_data = 3;
  bool has_ybts_stopnotification_data() const;
  void clear_ybts_stopnotification_data();
  static const int kYbtsStopnotificationDataFieldNumber = 3;
  const ::com::microsoft::cellsar::protobuf::yate::YbtsData_YbtsStopnotificationData& ybts_stopnotification_data() const;
  ::com::microsoft::cellsar::protobuf::yate::YbtsData_YbtsStopnotificationData* mutable_ybts_stopnotification_data();
  ::com::microsoft::cellsar::protobuf::yate::YbtsData_YbtsStopnotificationData* release_ybts_stopnotification_data();
  void set_allocated_ybts_stopnotification_data(::com::microsoft::cellsar::protobuf::yate::YbtsData_YbtsStopnotificationData* ybts_stopnotification_data);

  // @@protoc_insertion_point(class_scope:com.microsoft.cellsar.protobuf.yate.YbtsData)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr type_;
  ::com::microsoft::cellsar::protobuf::yate::YbtsData_YbtsTimeoutData* ybts_timeout_data_;
  ::com::microsoft::cellsar::protobuf::yate::YbtsData_YbtsStopnotificationData* ybts_stopnotification_data_;
  mutable int _cached_size_;
  friend struct protobuf_from_5fyate_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class SmsData : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:com.microsoft.cellsar.protobuf.yate.SmsData) */ {
 public:
  SmsData();
  virtual ~SmsData();

  SmsData(const SmsData& from);

  inline SmsData& operator=(const SmsData& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  SmsData(SmsData&& from) noexcept
    : SmsData() {
    *this = ::std::move(from);
  }

  inline SmsData& operator=(SmsData&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const SmsData& default_instance();

  static inline const SmsData* internal_default_instance() {
    return reinterpret_cast<const SmsData*>(
               &_SmsData_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    5;

  void Swap(SmsData* other);
  friend void swap(SmsData& a, SmsData& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline SmsData* New() const PROTOBUF_FINAL { return New(NULL); }

  SmsData* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const SmsData& from);
  void MergeFrom(const SmsData& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(SmsData* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string msg = 2;
  void clear_msg();
  static const int kMsgFieldNumber = 2;
  const ::std::string& msg() const;
  void set_msg(const ::std::string& value);
  #if LANG_CXX11
  void set_msg(::std::string&& value);
  #endif
  void set_msg(const char* value);
  void set_msg(const char* value, size_t size);
  ::std::string* mutable_msg();
  ::std::string* release_msg();
  void set_allocated_msg(::std::string* msg);

  // .com.microsoft.cellsar.protobuf.Subscriber subscriber = 1;
  bool has_subscriber() const;
  void clear_subscriber();
  static const int kSubscriberFieldNumber = 1;
  const ::com::microsoft::cellsar::protobuf::Subscriber& subscriber() const;
  ::com::microsoft::cellsar::protobuf::Subscriber* mutable_subscriber();
  ::com::microsoft::cellsar::protobuf::Subscriber* release_subscriber();
  void set_allocated_subscriber(::com::microsoft::cellsar::protobuf::Subscriber* subscriber);

  // @@protoc_insertion_point(class_scope:com.microsoft.cellsar.protobuf.yate.SmsData)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr msg_;
  ::com::microsoft::cellsar::protobuf::Subscriber* subscriber_;
  mutable int _cached_size_;
  friend struct protobuf_from_5fyate_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class SmsFailedData : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:com.microsoft.cellsar.protobuf.yate.SmsFailedData) */ {
 public:
  SmsFailedData();
  virtual ~SmsFailedData();

  SmsFailedData(const SmsFailedData& from);

  inline SmsFailedData& operator=(const SmsFailedData& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  SmsFailedData(SmsFailedData&& from) noexcept
    : SmsFailedData() {
    *this = ::std::move(from);
  }

  inline SmsFailedData& operator=(SmsFailedData&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const SmsFailedData& default_instance();

  static inline const SmsFailedData* internal_default_instance() {
    return reinterpret_cast<const SmsFailedData*>(
               &_SmsFailedData_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    6;

  void Swap(SmsFailedData* other);
  friend void swap(SmsFailedData& a, SmsFailedData& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline SmsFailedData* New() const PROTOBUF_FINAL { return New(NULL); }

  SmsFailedData* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const SmsFailedData& from);
  void MergeFrom(const SmsFailedData& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(SmsFailedData* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string error = 2;
  void clear_error();
  static const int kErrorFieldNumber = 2;
  const ::std::string& error() const;
  void set_error(const ::std::string& value);
  #if LANG_CXX11
  void set_error(::std::string&& value);
  #endif
  void set_error(const char* value);
  void set_error(const char* value, size_t size);
  ::std::string* mutable_error();
  ::std::string* release_error();
  void set_allocated_error(::std::string* error);

  // string reason = 3;
  void clear_reason();
  static const int kReasonFieldNumber = 3;
  const ::std::string& reason() const;
  void set_reason(const ::std::string& value);
  #if LANG_CXX11
  void set_reason(::std::string&& value);
  #endif
  void set_reason(const char* value);
  void set_reason(const char* value, size_t size);
  ::std::string* mutable_reason();
  ::std::string* release_reason();
  void set_allocated_reason(::std::string* reason);

  // string msg = 7;
  void clear_msg();
  static const int kMsgFieldNumber = 7;
  const ::std::string& msg() const;
  void set_msg(const ::std::string& value);
  #if LANG_CXX11
  void set_msg(::std::string&& value);
  #endif
  void set_msg(const char* value);
  void set_msg(const char* value, size_t size);
  ::std::string* mutable_msg();
  ::std::string* release_msg();
  void set_allocated_msg(::std::string* msg);

  // .com.microsoft.cellsar.protobuf.Subscriber to_subscriber = 1;
  bool has_to_subscriber() const;
  void clear_to_subscriber();
  static const int kToSubscriberFieldNumber = 1;
  const ::com::microsoft::cellsar::protobuf::Subscriber& to_subscriber() const;
  ::com::microsoft::cellsar::protobuf::Subscriber* mutable_to_subscriber();
  ::com::microsoft::cellsar::protobuf::Subscriber* release_to_subscriber();
  void set_allocated_to_subscriber(::com::microsoft::cellsar::protobuf::Subscriber* to_subscriber);

  // .com.microsoft.cellsar.protobuf.Subscriber from_subscriber = 6;
  bool has_from_subscriber() const;
  void clear_from_subscriber();
  static const int kFromSubscriberFieldNumber = 6;
  const ::com::microsoft::cellsar::protobuf::Subscriber& from_subscriber() const;
  ::com::microsoft::cellsar::protobuf::Subscriber* mutable_from_subscriber();
  ::com::microsoft::cellsar::protobuf::Subscriber* release_from_subscriber();
  void set_allocated_from_subscriber(::com::microsoft::cellsar::protobuf::Subscriber* from_subscriber);

  // uint64 silent_sms_count = 5;
  void clear_silent_sms_count();
  static const int kSilentSmsCountFieldNumber = 5;
  ::google::protobuf::uint64 silent_sms_count() const;
  void set_silent_sms_count(::google::protobuf::uint64 value);

  // bool silent = 4;
  void clear_silent();
  static const int kSilentFieldNumber = 4;
  bool silent() const;
  void set_silent(bool value);

  // @@protoc_insertion_point(class_scope:com.microsoft.cellsar.protobuf.yate.SmsFailedData)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr error_;
  ::google::protobuf::internal::ArenaStringPtr reason_;
  ::google::protobuf::internal::ArenaStringPtr msg_;
  ::com::microsoft::cellsar::protobuf::Subscriber* to_subscriber_;
  ::com::microsoft::cellsar::protobuf::Subscriber* from_subscriber_;
  ::google::protobuf::uint64 silent_sms_count_;
  bool silent_;
  mutable int _cached_size_;
  friend struct protobuf_from_5fyate_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class YateMessage : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:com.microsoft.cellsar.protobuf.yate.YateMessage) */ {
 public:
  YateMessage();
  virtual ~YateMessage();

  YateMessage(const YateMessage& from);

  inline YateMessage& operator=(const YateMessage& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  YateMessage(YateMessage&& from) noexcept
    : YateMessage() {
    *this = ::std::move(from);
  }

  inline YateMessage& operator=(YateMessage&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const YateMessage& default_instance();

  static inline const YateMessage* internal_default_instance() {
    return reinterpret_cast<const YateMessage*>(
               &_YateMessage_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    7;

  void Swap(YateMessage* other);
  friend void swap(YateMessage& a, YateMessage& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline YateMessage* New() const PROTOBUF_FINAL { return New(NULL); }

  YateMessage* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const YateMessage& from);
  void MergeFrom(const YateMessage& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(YateMessage* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string type = 1;
  void clear_type();
  static const int kTypeFieldNumber = 1;
  const ::std::string& type() const;
  void set_type(const ::std::string& value);
  #if LANG_CXX11
  void set_type(::std::string&& value);
  #endif
  void set_type(const char* value);
  void set_type(const char* value, size_t size);
  ::std::string* mutable_type();
  ::std::string* release_type();
  void set_allocated_type(::std::string* type);

  // .com.microsoft.cellsar.protobuf.yate.PhyData phy_data = 3;
  bool has_phy_data() const;
  void clear_phy_data();
  static const int kPhyDataFieldNumber = 3;
  const ::com::microsoft::cellsar::protobuf::yate::PhyData& phy_data() const;
  ::com::microsoft::cellsar::protobuf::yate::PhyData* mutable_phy_data();
  ::com::microsoft::cellsar::protobuf::yate::PhyData* release_phy_data();
  void set_allocated_phy_data(::com::microsoft::cellsar::protobuf::yate::PhyData* phy_data);

  // .com.microsoft.cellsar.protobuf.yate.StatusData status_data = 4;
  bool has_status_data() const;
  void clear_status_data();
  static const int kStatusDataFieldNumber = 4;
  const ::com::microsoft::cellsar::protobuf::yate::StatusData& status_data() const;
  ::com::microsoft::cellsar::protobuf::yate::StatusData* mutable_status_data();
  ::com::microsoft::cellsar::protobuf::yate::StatusData* release_status_data();
  void set_allocated_status_data(::com::microsoft::cellsar::protobuf::yate::StatusData* status_data);

  // .com.microsoft.cellsar.protobuf.yate.YbtsData ybts_data = 5;
  bool has_ybts_data() const;
  void clear_ybts_data();
  static const int kYbtsDataFieldNumber = 5;
  const ::com::microsoft::cellsar::protobuf::yate::YbtsData& ybts_data() const;
  ::com::microsoft::cellsar::protobuf::yate::YbtsData* mutable_ybts_data();
  ::com::microsoft::cellsar::protobuf::yate::YbtsData* release_ybts_data();
  void set_allocated_ybts_data(::com::microsoft::cellsar::protobuf::yate::YbtsData* ybts_data);

  // .com.microsoft.cellsar.protobuf.yate.SmsData sms_data = 6;
  bool has_sms_data() const;
  void clear_sms_data();
  static const int kSmsDataFieldNumber = 6;
  const ::com::microsoft::cellsar::protobuf::yate::SmsData& sms_data() const;
  ::com::microsoft::cellsar::protobuf::yate::SmsData* mutable_sms_data();
  ::com::microsoft::cellsar::protobuf::yate::SmsData* release_sms_data();
  void set_allocated_sms_data(::com::microsoft::cellsar::protobuf::yate::SmsData* sms_data);

  // .com.microsoft.cellsar.protobuf.yate.SmsFailedData sms_failed_data = 7;
  bool has_sms_failed_data() const;
  void clear_sms_failed_data();
  static const int kSmsFailedDataFieldNumber = 7;
  const ::com::microsoft::cellsar::protobuf::yate::SmsFailedData& sms_failed_data() const;
  ::com::microsoft::cellsar::protobuf::yate::SmsFailedData* mutable_sms_failed_data();
  ::com::microsoft::cellsar::protobuf::yate::SmsFailedData* release_sms_failed_data();
  void set_allocated_sms_failed_data(::com::microsoft::cellsar::protobuf::yate::SmsFailedData* sms_failed_data);

  // uint64 time = 2;
  void clear_time();
  static const int kTimeFieldNumber = 2;
  ::google::protobuf::uint64 time() const;
  void set_time(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:com.microsoft.cellsar.protobuf.yate.YateMessage)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr type_;
  ::com::microsoft::cellsar::protobuf::yate::PhyData* phy_data_;
  ::com::microsoft::cellsar::protobuf::yate::StatusData* status_data_;
  ::com::microsoft::cellsar::protobuf::yate::YbtsData* ybts_data_;
  ::com::microsoft::cellsar::protobuf::yate::SmsData* sms_data_;
  ::com::microsoft::cellsar::protobuf::yate::SmsFailedData* sms_failed_data_;
  ::google::protobuf::uint64 time_;
  mutable int _cached_size_;
  friend struct protobuf_from_5fyate_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// PhyData

// .com.microsoft.cellsar.protobuf.Subscriber subscriber = 1;
inline bool PhyData::has_subscriber() const {
  return this != internal_default_instance() && subscriber_ != NULL;
}
inline void PhyData::clear_subscriber() {
  if (GetArenaNoVirtual() == NULL && subscriber_ != NULL) delete subscriber_;
  subscriber_ = NULL;
}
inline const ::com::microsoft::cellsar::protobuf::Subscriber& PhyData::subscriber() const {
  const ::com::microsoft::cellsar::protobuf::Subscriber* p = subscriber_;
  // @@protoc_insertion_point(field_get:com.microsoft.cellsar.protobuf.yate.PhyData.subscriber)
  return p != NULL ? *p : *reinterpret_cast<const ::com::microsoft::cellsar::protobuf::Subscriber*>(
      &::com::microsoft::cellsar::protobuf::_Subscriber_default_instance_);
}
inline ::com::microsoft::cellsar::protobuf::Subscriber* PhyData::mutable_subscriber() {
  
  if (subscriber_ == NULL) {
    subscriber_ = new ::com::microsoft::cellsar::protobuf::Subscriber;
  }
  // @@protoc_insertion_point(field_mutable:com.microsoft.cellsar.protobuf.yate.PhyData.subscriber)
  return subscriber_;
}
inline ::com::microsoft::cellsar::protobuf::Subscriber* PhyData::release_subscriber() {
  // @@protoc_insertion_point(field_release:com.microsoft.cellsar.protobuf.yate.PhyData.subscriber)
  
  ::com::microsoft::cellsar::protobuf::Subscriber* temp = subscriber_;
  subscriber_ = NULL;
  return temp;
}
inline void PhyData::set_allocated_subscriber(::com::microsoft::cellsar::protobuf::Subscriber* subscriber) {
  delete subscriber_;
  subscriber_ = subscriber;
  if (subscriber) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:com.microsoft.cellsar.protobuf.yate.PhyData.subscriber)
}

// uint32 ta = 2;
inline void PhyData::clear_ta() {
  ta_ = 0u;
}
inline ::google::protobuf::uint32 PhyData::ta() const {
  // @@protoc_insertion_point(field_get:com.microsoft.cellsar.protobuf.yate.PhyData.ta)
  return ta_;
}
inline void PhyData::set_ta(::google::protobuf::uint32 value) {
  
  ta_ = value;
  // @@protoc_insertion_point(field_set:com.microsoft.cellsar.protobuf.yate.PhyData.ta)
}

// float te = 3;
inline void PhyData::clear_te() {
  te_ = 0;
}
inline float PhyData::te() const {
  // @@protoc_insertion_point(field_get:com.microsoft.cellsar.protobuf.yate.PhyData.te)
  return te_;
}
inline void PhyData::set_te(float value) {
  
  te_ = value;
  // @@protoc_insertion_point(field_set:com.microsoft.cellsar.protobuf.yate.PhyData.te)
}

// float up_rssi = 4;
inline void PhyData::clear_up_rssi() {
  up_rssi_ = 0;
}
inline float PhyData::up_rssi() const {
  // @@protoc_insertion_point(field_get:com.microsoft.cellsar.protobuf.yate.PhyData.up_rssi)
  return up_rssi_;
}
inline void PhyData::set_up_rssi(float value) {
  
  up_rssi_ = value;
  // @@protoc_insertion_point(field_set:com.microsoft.cellsar.protobuf.yate.PhyData.up_rssi)
}

// float dn_rssi_dbm = 5;
inline void PhyData::clear_dn_rssi_dbm() {
  dn_rssi_dbm_ = 0;
}
inline float PhyData::dn_rssi_dbm() const {
  // @@protoc_insertion_point(field_get:com.microsoft.cellsar.protobuf.yate.PhyData.dn_rssi_dbm)
  return dn_rssi_dbm_;
}
inline void PhyData::set_dn_rssi_dbm(float value) {
  
  dn_rssi_dbm_ = value;
  // @@protoc_insertion_point(field_set:com.microsoft.cellsar.protobuf.yate.PhyData.dn_rssi_dbm)
}

// float tx_pwr = 6;
inline void PhyData::clear_tx_pwr() {
  tx_pwr_ = 0;
}
inline float PhyData::tx_pwr() const {
  // @@protoc_insertion_point(field_get:com.microsoft.cellsar.protobuf.yate.PhyData.tx_pwr)
  return tx_pwr_;
}
inline void PhyData::set_tx_pwr(float value) {
  
  tx_pwr_ = value;
  // @@protoc_insertion_point(field_set:com.microsoft.cellsar.protobuf.yate.PhyData.tx_pwr)
}

// -------------------------------------------------------------------

// StatusData

// bool engine_started = 1;
inline void StatusData::clear_engine_started() {
  engine_started_ = false;
}
inline bool StatusData::engine_started() const {
  // @@protoc_insertion_point(field_get:com.microsoft.cellsar.protobuf.yate.StatusData.engine_started)
  return engine_started_;
}
inline void StatusData::set_engine_started(bool value) {
  
  engine_started_ = value;
  // @@protoc_insertion_point(field_set:com.microsoft.cellsar.protobuf.yate.StatusData.engine_started)
}

// .com.microsoft.cellsar.protobuf.Radio radio = 2;
inline bool StatusData::has_radio() const {
  return this != internal_default_instance() && radio_ != NULL;
}
inline void StatusData::clear_radio() {
  if (GetArenaNoVirtual() == NULL && radio_ != NULL) delete radio_;
  radio_ = NULL;
}
inline const ::com::microsoft::cellsar::protobuf::Radio& StatusData::radio() const {
  const ::com::microsoft::cellsar::protobuf::Radio* p = radio_;
  // @@protoc_insertion_point(field_get:com.microsoft.cellsar.protobuf.yate.StatusData.radio)
  return p != NULL ? *p : *reinterpret_cast<const ::com::microsoft::cellsar::protobuf::Radio*>(
      &::com::microsoft::cellsar::protobuf::_Radio_default_instance_);
}
inline ::com::microsoft::cellsar::protobuf::Radio* StatusData::mutable_radio() {
  
  if (radio_ == NULL) {
    radio_ = new ::com::microsoft::cellsar::protobuf::Radio;
  }
  // @@protoc_insertion_point(field_mutable:com.microsoft.cellsar.protobuf.yate.StatusData.radio)
  return radio_;
}
inline ::com::microsoft::cellsar::protobuf::Radio* StatusData::release_radio() {
  // @@protoc_insertion_point(field_release:com.microsoft.cellsar.protobuf.yate.StatusData.radio)
  
  ::com::microsoft::cellsar::protobuf::Radio* temp = radio_;
  radio_ = NULL;
  return temp;
}
inline void StatusData::set_allocated_radio(::com::microsoft::cellsar::protobuf::Radio* radio) {
  delete radio_;
  radio_ = radio;
  if (radio) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:com.microsoft.cellsar.protobuf.yate.StatusData.radio)
}

// uint32 pending_smss = 3;
inline void StatusData::clear_pending_smss() {
  pending_smss_ = 0u;
}
inline ::google::protobuf::uint32 StatusData::pending_smss() const {
  // @@protoc_insertion_point(field_get:com.microsoft.cellsar.protobuf.yate.StatusData.pending_smss)
  return pending_smss_;
}
inline void StatusData::set_pending_smss(::google::protobuf::uint32 value) {
  
  pending_smss_ = value;
  // @@protoc_insertion_point(field_set:com.microsoft.cellsar.protobuf.yate.StatusData.pending_smss)
}

// repeated .com.microsoft.cellsar.protobuf.Subscriber subscribers = 4;
inline int StatusData::subscribers_size() const {
  return subscribers_.size();
}
inline void StatusData::clear_subscribers() {
  subscribers_.Clear();
}
inline const ::com::microsoft::cellsar::protobuf::Subscriber& StatusData::subscribers(int index) const {
  // @@protoc_insertion_point(field_get:com.microsoft.cellsar.protobuf.yate.StatusData.subscribers)
  return subscribers_.Get(index);
}
inline ::com::microsoft::cellsar::protobuf::Subscriber* StatusData::mutable_subscribers(int index) {
  // @@protoc_insertion_point(field_mutable:com.microsoft.cellsar.protobuf.yate.StatusData.subscribers)
  return subscribers_.Mutable(index);
}
inline ::com::microsoft::cellsar::protobuf::Subscriber* StatusData::add_subscribers() {
  // @@protoc_insertion_point(field_add:com.microsoft.cellsar.protobuf.yate.StatusData.subscribers)
  return subscribers_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::com::microsoft::cellsar::protobuf::Subscriber >*
StatusData::mutable_subscribers() {
  // @@protoc_insertion_point(field_mutable_list:com.microsoft.cellsar.protobuf.yate.StatusData.subscribers)
  return &subscribers_;
}
inline const ::google::protobuf::RepeatedPtrField< ::com::microsoft::cellsar::protobuf::Subscriber >&
StatusData::subscribers() const {
  // @@protoc_insertion_point(field_list:com.microsoft.cellsar.protobuf.yate.StatusData.subscribers)
  return subscribers_;
}

// -------------------------------------------------------------------

// YbtsData_YbtsTimeoutData

// string timeout_for = 1;
inline void YbtsData_YbtsTimeoutData::clear_timeout_for() {
  timeout_for_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& YbtsData_YbtsTimeoutData::timeout_for() const {
  // @@protoc_insertion_point(field_get:com.microsoft.cellsar.protobuf.yate.YbtsData.YbtsTimeoutData.timeout_for)
  return timeout_for_.GetNoArena();
}
inline void YbtsData_YbtsTimeoutData::set_timeout_for(const ::std::string& value) {
  
  timeout_for_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:com.microsoft.cellsar.protobuf.yate.YbtsData.YbtsTimeoutData.timeout_for)
}
#if LANG_CXX11
inline void YbtsData_YbtsTimeoutData::set_timeout_for(::std::string&& value) {
  
  timeout_for_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:com.microsoft.cellsar.protobuf.yate.YbtsData.YbtsTimeoutData.timeout_for)
}
#endif
inline void YbtsData_YbtsTimeoutData::set_timeout_for(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  timeout_for_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:com.microsoft.cellsar.protobuf.yate.YbtsData.YbtsTimeoutData.timeout_for)
}
inline void YbtsData_YbtsTimeoutData::set_timeout_for(const char* value, size_t size) {
  
  timeout_for_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:com.microsoft.cellsar.protobuf.yate.YbtsData.YbtsTimeoutData.timeout_for)
}
inline ::std::string* YbtsData_YbtsTimeoutData::mutable_timeout_for() {
  
  // @@protoc_insertion_point(field_mutable:com.microsoft.cellsar.protobuf.yate.YbtsData.YbtsTimeoutData.timeout_for)
  return timeout_for_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* YbtsData_YbtsTimeoutData::release_timeout_for() {
  // @@protoc_insertion_point(field_release:com.microsoft.cellsar.protobuf.yate.YbtsData.YbtsTimeoutData.timeout_for)
  
  return timeout_for_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void YbtsData_YbtsTimeoutData::set_allocated_timeout_for(::std::string* timeout_for) {
  if (timeout_for != NULL) {
    
  } else {
    
  }
  timeout_for_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), timeout_for);
  // @@protoc_insertion_point(field_set_allocated:com.microsoft.cellsar.protobuf.yate.YbtsData.YbtsTimeoutData.timeout_for)
}

// -------------------------------------------------------------------

// YbtsData_YbtsStopnotificationData

// bool restarting = 1;
inline void YbtsData_YbtsStopnotificationData::clear_restarting() {
  restarting_ = false;
}
inline bool YbtsData_YbtsStopnotificationData::restarting() const {
  // @@protoc_insertion_point(field_get:com.microsoft.cellsar.protobuf.yate.YbtsData.YbtsStopnotificationData.restarting)
  return restarting_;
}
inline void YbtsData_YbtsStopnotificationData::set_restarting(bool value) {
  
  restarting_ = value;
  // @@protoc_insertion_point(field_set:com.microsoft.cellsar.protobuf.yate.YbtsData.YbtsStopnotificationData.restarting)
}

// string reason = 2;
inline void YbtsData_YbtsStopnotificationData::clear_reason() {
  reason_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& YbtsData_YbtsStopnotificationData::reason() const {
  // @@protoc_insertion_point(field_get:com.microsoft.cellsar.protobuf.yate.YbtsData.YbtsStopnotificationData.reason)
  return reason_.GetNoArena();
}
inline void YbtsData_YbtsStopnotificationData::set_reason(const ::std::string& value) {
  
  reason_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:com.microsoft.cellsar.protobuf.yate.YbtsData.YbtsStopnotificationData.reason)
}
#if LANG_CXX11
inline void YbtsData_YbtsStopnotificationData::set_reason(::std::string&& value) {
  
  reason_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:com.microsoft.cellsar.protobuf.yate.YbtsData.YbtsStopnotificationData.reason)
}
#endif
inline void YbtsData_YbtsStopnotificationData::set_reason(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  reason_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:com.microsoft.cellsar.protobuf.yate.YbtsData.YbtsStopnotificationData.reason)
}
inline void YbtsData_YbtsStopnotificationData::set_reason(const char* value, size_t size) {
  
  reason_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:com.microsoft.cellsar.protobuf.yate.YbtsData.YbtsStopnotificationData.reason)
}
inline ::std::string* YbtsData_YbtsStopnotificationData::mutable_reason() {
  
  // @@protoc_insertion_point(field_mutable:com.microsoft.cellsar.protobuf.yate.YbtsData.YbtsStopnotificationData.reason)
  return reason_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* YbtsData_YbtsStopnotificationData::release_reason() {
  // @@protoc_insertion_point(field_release:com.microsoft.cellsar.protobuf.yate.YbtsData.YbtsStopnotificationData.reason)
  
  return reason_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void YbtsData_YbtsStopnotificationData::set_allocated_reason(::std::string* reason) {
  if (reason != NULL) {
    
  } else {
    
  }
  reason_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), reason);
  // @@protoc_insertion_point(field_set_allocated:com.microsoft.cellsar.protobuf.yate.YbtsData.YbtsStopnotificationData.reason)
}

// -------------------------------------------------------------------

// YbtsData

// string type = 1;
inline void YbtsData::clear_type() {
  type_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& YbtsData::type() const {
  // @@protoc_insertion_point(field_get:com.microsoft.cellsar.protobuf.yate.YbtsData.type)
  return type_.GetNoArena();
}
inline void YbtsData::set_type(const ::std::string& value) {
  
  type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:com.microsoft.cellsar.protobuf.yate.YbtsData.type)
}
#if LANG_CXX11
inline void YbtsData::set_type(::std::string&& value) {
  
  type_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:com.microsoft.cellsar.protobuf.yate.YbtsData.type)
}
#endif
inline void YbtsData::set_type(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:com.microsoft.cellsar.protobuf.yate.YbtsData.type)
}
inline void YbtsData::set_type(const char* value, size_t size) {
  
  type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:com.microsoft.cellsar.protobuf.yate.YbtsData.type)
}
inline ::std::string* YbtsData::mutable_type() {
  
  // @@protoc_insertion_point(field_mutable:com.microsoft.cellsar.protobuf.yate.YbtsData.type)
  return type_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* YbtsData::release_type() {
  // @@protoc_insertion_point(field_release:com.microsoft.cellsar.protobuf.yate.YbtsData.type)
  
  return type_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void YbtsData::set_allocated_type(::std::string* type) {
  if (type != NULL) {
    
  } else {
    
  }
  type_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), type);
  // @@protoc_insertion_point(field_set_allocated:com.microsoft.cellsar.protobuf.yate.YbtsData.type)
}

// .com.microsoft.cellsar.protobuf.yate.YbtsData.YbtsTimeoutData ybts_timeout_data = 2;
inline bool YbtsData::has_ybts_timeout_data() const {
  return this != internal_default_instance() && ybts_timeout_data_ != NULL;
}
inline void YbtsData::clear_ybts_timeout_data() {
  if (GetArenaNoVirtual() == NULL && ybts_timeout_data_ != NULL) delete ybts_timeout_data_;
  ybts_timeout_data_ = NULL;
}
inline const ::com::microsoft::cellsar::protobuf::yate::YbtsData_YbtsTimeoutData& YbtsData::ybts_timeout_data() const {
  const ::com::microsoft::cellsar::protobuf::yate::YbtsData_YbtsTimeoutData* p = ybts_timeout_data_;
  // @@protoc_insertion_point(field_get:com.microsoft.cellsar.protobuf.yate.YbtsData.ybts_timeout_data)
  return p != NULL ? *p : *reinterpret_cast<const ::com::microsoft::cellsar::protobuf::yate::YbtsData_YbtsTimeoutData*>(
      &::com::microsoft::cellsar::protobuf::yate::_YbtsData_YbtsTimeoutData_default_instance_);
}
inline ::com::microsoft::cellsar::protobuf::yate::YbtsData_YbtsTimeoutData* YbtsData::mutable_ybts_timeout_data() {
  
  if (ybts_timeout_data_ == NULL) {
    ybts_timeout_data_ = new ::com::microsoft::cellsar::protobuf::yate::YbtsData_YbtsTimeoutData;
  }
  // @@protoc_insertion_point(field_mutable:com.microsoft.cellsar.protobuf.yate.YbtsData.ybts_timeout_data)
  return ybts_timeout_data_;
}
inline ::com::microsoft::cellsar::protobuf::yate::YbtsData_YbtsTimeoutData* YbtsData::release_ybts_timeout_data() {
  // @@protoc_insertion_point(field_release:com.microsoft.cellsar.protobuf.yate.YbtsData.ybts_timeout_data)
  
  ::com::microsoft::cellsar::protobuf::yate::YbtsData_YbtsTimeoutData* temp = ybts_timeout_data_;
  ybts_timeout_data_ = NULL;
  return temp;
}
inline void YbtsData::set_allocated_ybts_timeout_data(::com::microsoft::cellsar::protobuf::yate::YbtsData_YbtsTimeoutData* ybts_timeout_data) {
  delete ybts_timeout_data_;
  ybts_timeout_data_ = ybts_timeout_data;
  if (ybts_timeout_data) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:com.microsoft.cellsar.protobuf.yate.YbtsData.ybts_timeout_data)
}

// .com.microsoft.cellsar.protobuf.yate.YbtsData.YbtsStopnotificationData ybts_stopnotification_data = 3;
inline bool YbtsData::has_ybts_stopnotification_data() const {
  return this != internal_default_instance() && ybts_stopnotification_data_ != NULL;
}
inline void YbtsData::clear_ybts_stopnotification_data() {
  if (GetArenaNoVirtual() == NULL && ybts_stopnotification_data_ != NULL) delete ybts_stopnotification_data_;
  ybts_stopnotification_data_ = NULL;
}
inline const ::com::microsoft::cellsar::protobuf::yate::YbtsData_YbtsStopnotificationData& YbtsData::ybts_stopnotification_data() const {
  const ::com::microsoft::cellsar::protobuf::yate::YbtsData_YbtsStopnotificationData* p = ybts_stopnotification_data_;
  // @@protoc_insertion_point(field_get:com.microsoft.cellsar.protobuf.yate.YbtsData.ybts_stopnotification_data)
  return p != NULL ? *p : *reinterpret_cast<const ::com::microsoft::cellsar::protobuf::yate::YbtsData_YbtsStopnotificationData*>(
      &::com::microsoft::cellsar::protobuf::yate::_YbtsData_YbtsStopnotificationData_default_instance_);
}
inline ::com::microsoft::cellsar::protobuf::yate::YbtsData_YbtsStopnotificationData* YbtsData::mutable_ybts_stopnotification_data() {
  
  if (ybts_stopnotification_data_ == NULL) {
    ybts_stopnotification_data_ = new ::com::microsoft::cellsar::protobuf::yate::YbtsData_YbtsStopnotificationData;
  }
  // @@protoc_insertion_point(field_mutable:com.microsoft.cellsar.protobuf.yate.YbtsData.ybts_stopnotification_data)
  return ybts_stopnotification_data_;
}
inline ::com::microsoft::cellsar::protobuf::yate::YbtsData_YbtsStopnotificationData* YbtsData::release_ybts_stopnotification_data() {
  // @@protoc_insertion_point(field_release:com.microsoft.cellsar.protobuf.yate.YbtsData.ybts_stopnotification_data)
  
  ::com::microsoft::cellsar::protobuf::yate::YbtsData_YbtsStopnotificationData* temp = ybts_stopnotification_data_;
  ybts_stopnotification_data_ = NULL;
  return temp;
}
inline void YbtsData::set_allocated_ybts_stopnotification_data(::com::microsoft::cellsar::protobuf::yate::YbtsData_YbtsStopnotificationData* ybts_stopnotification_data) {
  delete ybts_stopnotification_data_;
  ybts_stopnotification_data_ = ybts_stopnotification_data;
  if (ybts_stopnotification_data) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:com.microsoft.cellsar.protobuf.yate.YbtsData.ybts_stopnotification_data)
}

// -------------------------------------------------------------------

// SmsData

// .com.microsoft.cellsar.protobuf.Subscriber subscriber = 1;
inline bool SmsData::has_subscriber() const {
  return this != internal_default_instance() && subscriber_ != NULL;
}
inline void SmsData::clear_subscriber() {
  if (GetArenaNoVirtual() == NULL && subscriber_ != NULL) delete subscriber_;
  subscriber_ = NULL;
}
inline const ::com::microsoft::cellsar::protobuf::Subscriber& SmsData::subscriber() const {
  const ::com::microsoft::cellsar::protobuf::Subscriber* p = subscriber_;
  // @@protoc_insertion_point(field_get:com.microsoft.cellsar.protobuf.yate.SmsData.subscriber)
  return p != NULL ? *p : *reinterpret_cast<const ::com::microsoft::cellsar::protobuf::Subscriber*>(
      &::com::microsoft::cellsar::protobuf::_Subscriber_default_instance_);
}
inline ::com::microsoft::cellsar::protobuf::Subscriber* SmsData::mutable_subscriber() {
  
  if (subscriber_ == NULL) {
    subscriber_ = new ::com::microsoft::cellsar::protobuf::Subscriber;
  }
  // @@protoc_insertion_point(field_mutable:com.microsoft.cellsar.protobuf.yate.SmsData.subscriber)
  return subscriber_;
}
inline ::com::microsoft::cellsar::protobuf::Subscriber* SmsData::release_subscriber() {
  // @@protoc_insertion_point(field_release:com.microsoft.cellsar.protobuf.yate.SmsData.subscriber)
  
  ::com::microsoft::cellsar::protobuf::Subscriber* temp = subscriber_;
  subscriber_ = NULL;
  return temp;
}
inline void SmsData::set_allocated_subscriber(::com::microsoft::cellsar::protobuf::Subscriber* subscriber) {
  delete subscriber_;
  subscriber_ = subscriber;
  if (subscriber) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:com.microsoft.cellsar.protobuf.yate.SmsData.subscriber)
}

// string msg = 2;
inline void SmsData::clear_msg() {
  msg_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& SmsData::msg() const {
  // @@protoc_insertion_point(field_get:com.microsoft.cellsar.protobuf.yate.SmsData.msg)
  return msg_.GetNoArena();
}
inline void SmsData::set_msg(const ::std::string& value) {
  
  msg_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:com.microsoft.cellsar.protobuf.yate.SmsData.msg)
}
#if LANG_CXX11
inline void SmsData::set_msg(::std::string&& value) {
  
  msg_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:com.microsoft.cellsar.protobuf.yate.SmsData.msg)
}
#endif
inline void SmsData::set_msg(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  msg_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:com.microsoft.cellsar.protobuf.yate.SmsData.msg)
}
inline void SmsData::set_msg(const char* value, size_t size) {
  
  msg_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:com.microsoft.cellsar.protobuf.yate.SmsData.msg)
}
inline ::std::string* SmsData::mutable_msg() {
  
  // @@protoc_insertion_point(field_mutable:com.microsoft.cellsar.protobuf.yate.SmsData.msg)
  return msg_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SmsData::release_msg() {
  // @@protoc_insertion_point(field_release:com.microsoft.cellsar.protobuf.yate.SmsData.msg)
  
  return msg_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SmsData::set_allocated_msg(::std::string* msg) {
  if (msg != NULL) {
    
  } else {
    
  }
  msg_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), msg);
  // @@protoc_insertion_point(field_set_allocated:com.microsoft.cellsar.protobuf.yate.SmsData.msg)
}

// -------------------------------------------------------------------

// SmsFailedData

// .com.microsoft.cellsar.protobuf.Subscriber to_subscriber = 1;
inline bool SmsFailedData::has_to_subscriber() const {
  return this != internal_default_instance() && to_subscriber_ != NULL;
}
inline void SmsFailedData::clear_to_subscriber() {
  if (GetArenaNoVirtual() == NULL && to_subscriber_ != NULL) delete to_subscriber_;
  to_subscriber_ = NULL;
}
inline const ::com::microsoft::cellsar::protobuf::Subscriber& SmsFailedData::to_subscriber() const {
  const ::com::microsoft::cellsar::protobuf::Subscriber* p = to_subscriber_;
  // @@protoc_insertion_point(field_get:com.microsoft.cellsar.protobuf.yate.SmsFailedData.to_subscriber)
  return p != NULL ? *p : *reinterpret_cast<const ::com::microsoft::cellsar::protobuf::Subscriber*>(
      &::com::microsoft::cellsar::protobuf::_Subscriber_default_instance_);
}
inline ::com::microsoft::cellsar::protobuf::Subscriber* SmsFailedData::mutable_to_subscriber() {
  
  if (to_subscriber_ == NULL) {
    to_subscriber_ = new ::com::microsoft::cellsar::protobuf::Subscriber;
  }
  // @@protoc_insertion_point(field_mutable:com.microsoft.cellsar.protobuf.yate.SmsFailedData.to_subscriber)
  return to_subscriber_;
}
inline ::com::microsoft::cellsar::protobuf::Subscriber* SmsFailedData::release_to_subscriber() {
  // @@protoc_insertion_point(field_release:com.microsoft.cellsar.protobuf.yate.SmsFailedData.to_subscriber)
  
  ::com::microsoft::cellsar::protobuf::Subscriber* temp = to_subscriber_;
  to_subscriber_ = NULL;
  return temp;
}
inline void SmsFailedData::set_allocated_to_subscriber(::com::microsoft::cellsar::protobuf::Subscriber* to_subscriber) {
  delete to_subscriber_;
  to_subscriber_ = to_subscriber;
  if (to_subscriber) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:com.microsoft.cellsar.protobuf.yate.SmsFailedData.to_subscriber)
}

// string error = 2;
inline void SmsFailedData::clear_error() {
  error_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& SmsFailedData::error() const {
  // @@protoc_insertion_point(field_get:com.microsoft.cellsar.protobuf.yate.SmsFailedData.error)
  return error_.GetNoArena();
}
inline void SmsFailedData::set_error(const ::std::string& value) {
  
  error_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:com.microsoft.cellsar.protobuf.yate.SmsFailedData.error)
}
#if LANG_CXX11
inline void SmsFailedData::set_error(::std::string&& value) {
  
  error_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:com.microsoft.cellsar.protobuf.yate.SmsFailedData.error)
}
#endif
inline void SmsFailedData::set_error(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  error_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:com.microsoft.cellsar.protobuf.yate.SmsFailedData.error)
}
inline void SmsFailedData::set_error(const char* value, size_t size) {
  
  error_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:com.microsoft.cellsar.protobuf.yate.SmsFailedData.error)
}
inline ::std::string* SmsFailedData::mutable_error() {
  
  // @@protoc_insertion_point(field_mutable:com.microsoft.cellsar.protobuf.yate.SmsFailedData.error)
  return error_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SmsFailedData::release_error() {
  // @@protoc_insertion_point(field_release:com.microsoft.cellsar.protobuf.yate.SmsFailedData.error)
  
  return error_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SmsFailedData::set_allocated_error(::std::string* error) {
  if (error != NULL) {
    
  } else {
    
  }
  error_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), error);
  // @@protoc_insertion_point(field_set_allocated:com.microsoft.cellsar.protobuf.yate.SmsFailedData.error)
}

// string reason = 3;
inline void SmsFailedData::clear_reason() {
  reason_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& SmsFailedData::reason() const {
  // @@protoc_insertion_point(field_get:com.microsoft.cellsar.protobuf.yate.SmsFailedData.reason)
  return reason_.GetNoArena();
}
inline void SmsFailedData::set_reason(const ::std::string& value) {
  
  reason_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:com.microsoft.cellsar.protobuf.yate.SmsFailedData.reason)
}
#if LANG_CXX11
inline void SmsFailedData::set_reason(::std::string&& value) {
  
  reason_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:com.microsoft.cellsar.protobuf.yate.SmsFailedData.reason)
}
#endif
inline void SmsFailedData::set_reason(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  reason_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:com.microsoft.cellsar.protobuf.yate.SmsFailedData.reason)
}
inline void SmsFailedData::set_reason(const char* value, size_t size) {
  
  reason_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:com.microsoft.cellsar.protobuf.yate.SmsFailedData.reason)
}
inline ::std::string* SmsFailedData::mutable_reason() {
  
  // @@protoc_insertion_point(field_mutable:com.microsoft.cellsar.protobuf.yate.SmsFailedData.reason)
  return reason_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SmsFailedData::release_reason() {
  // @@protoc_insertion_point(field_release:com.microsoft.cellsar.protobuf.yate.SmsFailedData.reason)
  
  return reason_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SmsFailedData::set_allocated_reason(::std::string* reason) {
  if (reason != NULL) {
    
  } else {
    
  }
  reason_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), reason);
  // @@protoc_insertion_point(field_set_allocated:com.microsoft.cellsar.protobuf.yate.SmsFailedData.reason)
}

// bool silent = 4;
inline void SmsFailedData::clear_silent() {
  silent_ = false;
}
inline bool SmsFailedData::silent() const {
  // @@protoc_insertion_point(field_get:com.microsoft.cellsar.protobuf.yate.SmsFailedData.silent)
  return silent_;
}
inline void SmsFailedData::set_silent(bool value) {
  
  silent_ = value;
  // @@protoc_insertion_point(field_set:com.microsoft.cellsar.protobuf.yate.SmsFailedData.silent)
}

// uint64 silent_sms_count = 5;
inline void SmsFailedData::clear_silent_sms_count() {
  silent_sms_count_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 SmsFailedData::silent_sms_count() const {
  // @@protoc_insertion_point(field_get:com.microsoft.cellsar.protobuf.yate.SmsFailedData.silent_sms_count)
  return silent_sms_count_;
}
inline void SmsFailedData::set_silent_sms_count(::google::protobuf::uint64 value) {
  
  silent_sms_count_ = value;
  // @@protoc_insertion_point(field_set:com.microsoft.cellsar.protobuf.yate.SmsFailedData.silent_sms_count)
}

// .com.microsoft.cellsar.protobuf.Subscriber from_subscriber = 6;
inline bool SmsFailedData::has_from_subscriber() const {
  return this != internal_default_instance() && from_subscriber_ != NULL;
}
inline void SmsFailedData::clear_from_subscriber() {
  if (GetArenaNoVirtual() == NULL && from_subscriber_ != NULL) delete from_subscriber_;
  from_subscriber_ = NULL;
}
inline const ::com::microsoft::cellsar::protobuf::Subscriber& SmsFailedData::from_subscriber() const {
  const ::com::microsoft::cellsar::protobuf::Subscriber* p = from_subscriber_;
  // @@protoc_insertion_point(field_get:com.microsoft.cellsar.protobuf.yate.SmsFailedData.from_subscriber)
  return p != NULL ? *p : *reinterpret_cast<const ::com::microsoft::cellsar::protobuf::Subscriber*>(
      &::com::microsoft::cellsar::protobuf::_Subscriber_default_instance_);
}
inline ::com::microsoft::cellsar::protobuf::Subscriber* SmsFailedData::mutable_from_subscriber() {
  
  if (from_subscriber_ == NULL) {
    from_subscriber_ = new ::com::microsoft::cellsar::protobuf::Subscriber;
  }
  // @@protoc_insertion_point(field_mutable:com.microsoft.cellsar.protobuf.yate.SmsFailedData.from_subscriber)
  return from_subscriber_;
}
inline ::com::microsoft::cellsar::protobuf::Subscriber* SmsFailedData::release_from_subscriber() {
  // @@protoc_insertion_point(field_release:com.microsoft.cellsar.protobuf.yate.SmsFailedData.from_subscriber)
  
  ::com::microsoft::cellsar::protobuf::Subscriber* temp = from_subscriber_;
  from_subscriber_ = NULL;
  return temp;
}
inline void SmsFailedData::set_allocated_from_subscriber(::com::microsoft::cellsar::protobuf::Subscriber* from_subscriber) {
  delete from_subscriber_;
  from_subscriber_ = from_subscriber;
  if (from_subscriber) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:com.microsoft.cellsar.protobuf.yate.SmsFailedData.from_subscriber)
}

// string msg = 7;
inline void SmsFailedData::clear_msg() {
  msg_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& SmsFailedData::msg() const {
  // @@protoc_insertion_point(field_get:com.microsoft.cellsar.protobuf.yate.SmsFailedData.msg)
  return msg_.GetNoArena();
}
inline void SmsFailedData::set_msg(const ::std::string& value) {
  
  msg_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:com.microsoft.cellsar.protobuf.yate.SmsFailedData.msg)
}
#if LANG_CXX11
inline void SmsFailedData::set_msg(::std::string&& value) {
  
  msg_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:com.microsoft.cellsar.protobuf.yate.SmsFailedData.msg)
}
#endif
inline void SmsFailedData::set_msg(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  msg_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:com.microsoft.cellsar.protobuf.yate.SmsFailedData.msg)
}
inline void SmsFailedData::set_msg(const char* value, size_t size) {
  
  msg_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:com.microsoft.cellsar.protobuf.yate.SmsFailedData.msg)
}
inline ::std::string* SmsFailedData::mutable_msg() {
  
  // @@protoc_insertion_point(field_mutable:com.microsoft.cellsar.protobuf.yate.SmsFailedData.msg)
  return msg_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SmsFailedData::release_msg() {
  // @@protoc_insertion_point(field_release:com.microsoft.cellsar.protobuf.yate.SmsFailedData.msg)
  
  return msg_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SmsFailedData::set_allocated_msg(::std::string* msg) {
  if (msg != NULL) {
    
  } else {
    
  }
  msg_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), msg);
  // @@protoc_insertion_point(field_set_allocated:com.microsoft.cellsar.protobuf.yate.SmsFailedData.msg)
}

// -------------------------------------------------------------------

// YateMessage

// string type = 1;
inline void YateMessage::clear_type() {
  type_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& YateMessage::type() const {
  // @@protoc_insertion_point(field_get:com.microsoft.cellsar.protobuf.yate.YateMessage.type)
  return type_.GetNoArena();
}
inline void YateMessage::set_type(const ::std::string& value) {
  
  type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:com.microsoft.cellsar.protobuf.yate.YateMessage.type)
}
#if LANG_CXX11
inline void YateMessage::set_type(::std::string&& value) {
  
  type_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:com.microsoft.cellsar.protobuf.yate.YateMessage.type)
}
#endif
inline void YateMessage::set_type(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:com.microsoft.cellsar.protobuf.yate.YateMessage.type)
}
inline void YateMessage::set_type(const char* value, size_t size) {
  
  type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:com.microsoft.cellsar.protobuf.yate.YateMessage.type)
}
inline ::std::string* YateMessage::mutable_type() {
  
  // @@protoc_insertion_point(field_mutable:com.microsoft.cellsar.protobuf.yate.YateMessage.type)
  return type_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* YateMessage::release_type() {
  // @@protoc_insertion_point(field_release:com.microsoft.cellsar.protobuf.yate.YateMessage.type)
  
  return type_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void YateMessage::set_allocated_type(::std::string* type) {
  if (type != NULL) {
    
  } else {
    
  }
  type_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), type);
  // @@protoc_insertion_point(field_set_allocated:com.microsoft.cellsar.protobuf.yate.YateMessage.type)
}

// uint64 time = 2;
inline void YateMessage::clear_time() {
  time_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 YateMessage::time() const {
  // @@protoc_insertion_point(field_get:com.microsoft.cellsar.protobuf.yate.YateMessage.time)
  return time_;
}
inline void YateMessage::set_time(::google::protobuf::uint64 value) {
  
  time_ = value;
  // @@protoc_insertion_point(field_set:com.microsoft.cellsar.protobuf.yate.YateMessage.time)
}

// .com.microsoft.cellsar.protobuf.yate.PhyData phy_data = 3;
inline bool YateMessage::has_phy_data() const {
  return this != internal_default_instance() && phy_data_ != NULL;
}
inline void YateMessage::clear_phy_data() {
  if (GetArenaNoVirtual() == NULL && phy_data_ != NULL) delete phy_data_;
  phy_data_ = NULL;
}
inline const ::com::microsoft::cellsar::protobuf::yate::PhyData& YateMessage::phy_data() const {
  const ::com::microsoft::cellsar::protobuf::yate::PhyData* p = phy_data_;
  // @@protoc_insertion_point(field_get:com.microsoft.cellsar.protobuf.yate.YateMessage.phy_data)
  return p != NULL ? *p : *reinterpret_cast<const ::com::microsoft::cellsar::protobuf::yate::PhyData*>(
      &::com::microsoft::cellsar::protobuf::yate::_PhyData_default_instance_);
}
inline ::com::microsoft::cellsar::protobuf::yate::PhyData* YateMessage::mutable_phy_data() {
  
  if (phy_data_ == NULL) {
    phy_data_ = new ::com::microsoft::cellsar::protobuf::yate::PhyData;
  }
  // @@protoc_insertion_point(field_mutable:com.microsoft.cellsar.protobuf.yate.YateMessage.phy_data)
  return phy_data_;
}
inline ::com::microsoft::cellsar::protobuf::yate::PhyData* YateMessage::release_phy_data() {
  // @@protoc_insertion_point(field_release:com.microsoft.cellsar.protobuf.yate.YateMessage.phy_data)
  
  ::com::microsoft::cellsar::protobuf::yate::PhyData* temp = phy_data_;
  phy_data_ = NULL;
  return temp;
}
inline void YateMessage::set_allocated_phy_data(::com::microsoft::cellsar::protobuf::yate::PhyData* phy_data) {
  delete phy_data_;
  phy_data_ = phy_data;
  if (phy_data) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:com.microsoft.cellsar.protobuf.yate.YateMessage.phy_data)
}

// .com.microsoft.cellsar.protobuf.yate.StatusData status_data = 4;
inline bool YateMessage::has_status_data() const {
  return this != internal_default_instance() && status_data_ != NULL;
}
inline void YateMessage::clear_status_data() {
  if (GetArenaNoVirtual() == NULL && status_data_ != NULL) delete status_data_;
  status_data_ = NULL;
}
inline const ::com::microsoft::cellsar::protobuf::yate::StatusData& YateMessage::status_data() const {
  const ::com::microsoft::cellsar::protobuf::yate::StatusData* p = status_data_;
  // @@protoc_insertion_point(field_get:com.microsoft.cellsar.protobuf.yate.YateMessage.status_data)
  return p != NULL ? *p : *reinterpret_cast<const ::com::microsoft::cellsar::protobuf::yate::StatusData*>(
      &::com::microsoft::cellsar::protobuf::yate::_StatusData_default_instance_);
}
inline ::com::microsoft::cellsar::protobuf::yate::StatusData* YateMessage::mutable_status_data() {
  
  if (status_data_ == NULL) {
    status_data_ = new ::com::microsoft::cellsar::protobuf::yate::StatusData;
  }
  // @@protoc_insertion_point(field_mutable:com.microsoft.cellsar.protobuf.yate.YateMessage.status_data)
  return status_data_;
}
inline ::com::microsoft::cellsar::protobuf::yate::StatusData* YateMessage::release_status_data() {
  // @@protoc_insertion_point(field_release:com.microsoft.cellsar.protobuf.yate.YateMessage.status_data)
  
  ::com::microsoft::cellsar::protobuf::yate::StatusData* temp = status_data_;
  status_data_ = NULL;
  return temp;
}
inline void YateMessage::set_allocated_status_data(::com::microsoft::cellsar::protobuf::yate::StatusData* status_data) {
  delete status_data_;
  status_data_ = status_data;
  if (status_data) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:com.microsoft.cellsar.protobuf.yate.YateMessage.status_data)
}

// .com.microsoft.cellsar.protobuf.yate.YbtsData ybts_data = 5;
inline bool YateMessage::has_ybts_data() const {
  return this != internal_default_instance() && ybts_data_ != NULL;
}
inline void YateMessage::clear_ybts_data() {
  if (GetArenaNoVirtual() == NULL && ybts_data_ != NULL) delete ybts_data_;
  ybts_data_ = NULL;
}
inline const ::com::microsoft::cellsar::protobuf::yate::YbtsData& YateMessage::ybts_data() const {
  const ::com::microsoft::cellsar::protobuf::yate::YbtsData* p = ybts_data_;
  // @@protoc_insertion_point(field_get:com.microsoft.cellsar.protobuf.yate.YateMessage.ybts_data)
  return p != NULL ? *p : *reinterpret_cast<const ::com::microsoft::cellsar::protobuf::yate::YbtsData*>(
      &::com::microsoft::cellsar::protobuf::yate::_YbtsData_default_instance_);
}
inline ::com::microsoft::cellsar::protobuf::yate::YbtsData* YateMessage::mutable_ybts_data() {
  
  if (ybts_data_ == NULL) {
    ybts_data_ = new ::com::microsoft::cellsar::protobuf::yate::YbtsData;
  }
  // @@protoc_insertion_point(field_mutable:com.microsoft.cellsar.protobuf.yate.YateMessage.ybts_data)
  return ybts_data_;
}
inline ::com::microsoft::cellsar::protobuf::yate::YbtsData* YateMessage::release_ybts_data() {
  // @@protoc_insertion_point(field_release:com.microsoft.cellsar.protobuf.yate.YateMessage.ybts_data)
  
  ::com::microsoft::cellsar::protobuf::yate::YbtsData* temp = ybts_data_;
  ybts_data_ = NULL;
  return temp;
}
inline void YateMessage::set_allocated_ybts_data(::com::microsoft::cellsar::protobuf::yate::YbtsData* ybts_data) {
  delete ybts_data_;
  ybts_data_ = ybts_data;
  if (ybts_data) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:com.microsoft.cellsar.protobuf.yate.YateMessage.ybts_data)
}

// .com.microsoft.cellsar.protobuf.yate.SmsData sms_data = 6;
inline bool YateMessage::has_sms_data() const {
  return this != internal_default_instance() && sms_data_ != NULL;
}
inline void YateMessage::clear_sms_data() {
  if (GetArenaNoVirtual() == NULL && sms_data_ != NULL) delete sms_data_;
  sms_data_ = NULL;
}
inline const ::com::microsoft::cellsar::protobuf::yate::SmsData& YateMessage::sms_data() const {
  const ::com::microsoft::cellsar::protobuf::yate::SmsData* p = sms_data_;
  // @@protoc_insertion_point(field_get:com.microsoft.cellsar.protobuf.yate.YateMessage.sms_data)
  return p != NULL ? *p : *reinterpret_cast<const ::com::microsoft::cellsar::protobuf::yate::SmsData*>(
      &::com::microsoft::cellsar::protobuf::yate::_SmsData_default_instance_);
}
inline ::com::microsoft::cellsar::protobuf::yate::SmsData* YateMessage::mutable_sms_data() {
  
  if (sms_data_ == NULL) {
    sms_data_ = new ::com::microsoft::cellsar::protobuf::yate::SmsData;
  }
  // @@protoc_insertion_point(field_mutable:com.microsoft.cellsar.protobuf.yate.YateMessage.sms_data)
  return sms_data_;
}
inline ::com::microsoft::cellsar::protobuf::yate::SmsData* YateMessage::release_sms_data() {
  // @@protoc_insertion_point(field_release:com.microsoft.cellsar.protobuf.yate.YateMessage.sms_data)
  
  ::com::microsoft::cellsar::protobuf::yate::SmsData* temp = sms_data_;
  sms_data_ = NULL;
  return temp;
}
inline void YateMessage::set_allocated_sms_data(::com::microsoft::cellsar::protobuf::yate::SmsData* sms_data) {
  delete sms_data_;
  sms_data_ = sms_data;
  if (sms_data) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:com.microsoft.cellsar.protobuf.yate.YateMessage.sms_data)
}

// .com.microsoft.cellsar.protobuf.yate.SmsFailedData sms_failed_data = 7;
inline bool YateMessage::has_sms_failed_data() const {
  return this != internal_default_instance() && sms_failed_data_ != NULL;
}
inline void YateMessage::clear_sms_failed_data() {
  if (GetArenaNoVirtual() == NULL && sms_failed_data_ != NULL) delete sms_failed_data_;
  sms_failed_data_ = NULL;
}
inline const ::com::microsoft::cellsar::protobuf::yate::SmsFailedData& YateMessage::sms_failed_data() const {
  const ::com::microsoft::cellsar::protobuf::yate::SmsFailedData* p = sms_failed_data_;
  // @@protoc_insertion_point(field_get:com.microsoft.cellsar.protobuf.yate.YateMessage.sms_failed_data)
  return p != NULL ? *p : *reinterpret_cast<const ::com::microsoft::cellsar::protobuf::yate::SmsFailedData*>(
      &::com::microsoft::cellsar::protobuf::yate::_SmsFailedData_default_instance_);
}
inline ::com::microsoft::cellsar::protobuf::yate::SmsFailedData* YateMessage::mutable_sms_failed_data() {
  
  if (sms_failed_data_ == NULL) {
    sms_failed_data_ = new ::com::microsoft::cellsar::protobuf::yate::SmsFailedData;
  }
  // @@protoc_insertion_point(field_mutable:com.microsoft.cellsar.protobuf.yate.YateMessage.sms_failed_data)
  return sms_failed_data_;
}
inline ::com::microsoft::cellsar::protobuf::yate::SmsFailedData* YateMessage::release_sms_failed_data() {
  // @@protoc_insertion_point(field_release:com.microsoft.cellsar.protobuf.yate.YateMessage.sms_failed_data)
  
  ::com::microsoft::cellsar::protobuf::yate::SmsFailedData* temp = sms_failed_data_;
  sms_failed_data_ = NULL;
  return temp;
}
inline void YateMessage::set_allocated_sms_failed_data(::com::microsoft::cellsar::protobuf::yate::SmsFailedData* sms_failed_data) {
  delete sms_failed_data_;
  sms_failed_data_ = sms_failed_data;
  if (sms_failed_data) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:com.microsoft.cellsar.protobuf.yate.YateMessage.sms_failed_data)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)


}  // namespace yate
}  // namespace protobuf
}  // namespace cellsar
}  // namespace microsoft
}  // namespace com

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_from_5fyate_2eproto__INCLUDED
